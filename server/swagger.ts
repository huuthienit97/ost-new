import swaggerJsdoc from 'swagger-jsdoc';
import swaggerUi from 'swagger-ui-express';
import type { Express } from 'express';

const options = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'CLB S√°ng T·∫°o - API Documentation',
      version: '2.0.0',
      description: `
# H·ªá th·ªëng qu·∫£n l√Ω c√¢u l·∫°c b·ªô s√°ng t·∫°o

## Ph√¢n quy·ªÅn:
- üü¢ PUBLIC: Kh√¥ng c·∫ßn x√°c th·ª±c
- üîµ USER: C·∫ßn ƒëƒÉng nh·∫≠p
- üü° ADMIN: C·∫ßn quy·ªÅn admin
- üî¥ SUPER_ADMIN: C·∫ßn quy·ªÅn super admin

## H∆∞·ªõng d·∫´n:
1. ƒêƒÉng nh·∫≠p t·∫°i /api/auth/login ƒë·ªÉ l·∫•y JWT token
2. Click "Authorize" v√† nh·∫≠p: Bearer <token>
3. Test c√°c API theo nh√≥m ch·ª©c nƒÉng
      `,
    },
    servers: [
      {
        url: 'https://api.ost.edu.vn',
        description: 'Production Server',
      },
      {
        url: 'http://localhost:5000',
        description: 'Development Server',
      },
    ],
    paths: {
      // ===== SHOP & REWARD EXCHANGE API =====
      '/api/shop/products': {
        get: {
          summary: 'L·∫•y danh s√°ch s·∫£n ph·∫©m c·ª≠a h√†ng',
          tags: ['üõí Shop'],
          security: [{ bearerAuth: [] }],
          responses: {
            200: {
              description: 'Danh s√°ch s·∫£n ph·∫©m',
              content: {
                'application/json': {
                  schema: {
                    type: 'array',
                    items: { $ref: '#/components/schemas/ShopProduct' }
                  }
                }
              }
            }
          }
        },
        post: {
          summary: 'T·∫°o s·∫£n ph·∫©m m·ªõi (üü° ADMIN)',
          tags: ['üõí Shop'],
          security: [{ bearerAuth: [] }],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/InsertShopProduct' }
              }
            }
          },
          responses: {
            201: {
              description: 'S·∫£n ph·∫©m ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
              content: {
                'application/json': {
                  schema: { $ref: '#/components/schemas/ShopProduct' }
                }
              }
            }
          }
        }
      },
      '/api/shop/products/{id}': {
        get: {
          summary: 'L·∫•y th√¥ng tin s·∫£n ph·∫©m',
          tags: ['üõí Shop'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' }
            }
          ],
          responses: {
            200: {
              description: 'Th√¥ng tin s·∫£n ph·∫©m',
              content: {
                'application/json': {
                  schema: { $ref: '#/components/schemas/ShopProduct' }
                }
              }
            }
          }
        },
        put: {
          summary: 'C·∫≠p nh·∫≠t s·∫£n ph·∫©m (üü° ADMIN)',
          tags: ['üõí Shop'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' }
            }
          ],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/InsertShopProduct' }
              }
            }
          },
          responses: {
            200: {
              description: 'S·∫£n ph·∫©m ƒë∆∞·ª£c c·∫≠p nh·∫≠t'
            }
          }
        },
        delete: {
          summary: 'X√≥a s·∫£n ph·∫©m (üü° ADMIN)',
          tags: ['üõí Shop'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' }
            }
          ],
          responses: {
            200: {
              description: 'S·∫£n ph·∫©m ƒë∆∞·ª£c x√≥a'
            }
          }
        }
      },
      '/api/shop/purchase': {
        post: {
          summary: 'ƒê·ªïi th∆∞·ªüng s·∫£n ph·∫©m v·ªõi BeePoints',
          tags: ['üõí Shop'],
          security: [{ bearerAuth: [] }],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  required: ['productId', 'quantity'],
                  properties: {
                    productId: { type: 'integer', example: 1 },
                    quantity: { type: 'integer', minimum: 1, example: 1 },
                    deliveryInfo: { 
                      type: 'string', 
                      example: 'ƒê·ªãa ch·ªâ: 123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM\nSƒêT: 0901234567' 
                    }
                  }
                }
              }
            }
          },
          responses: {
            201: {
              description: 'ƒê·ªïi th∆∞·ªüng th√†nh c√¥ng',
              content: {
                'application/json': {
                  schema: {
                    type: 'object',
                    properties: {
                      order: { $ref: '#/components/schemas/ShopOrder' },
                      remainingBeePoints: { type: 'integer' }
                    }
                  }
                }
              }
            },
            400: {
              description: 'L·ªói ƒë·ªïi th∆∞·ªüng (kh√¥ng ƒë·ªß BeePoints, h·∫øt h√†ng, etc.)'
            }
          }
        }
      },
      '/api/shop/my-orders': {
        get: {
          summary: 'L·∫•y l·ªãch s·ª≠ ƒë·ªïi th∆∞·ªüng c·ªßa t√¥i',
          tags: ['üõí Shop'],
          security: [{ bearerAuth: [] }],
          responses: {
            200: {
              description: 'L·ªãch s·ª≠ ƒë·ªïi th∆∞·ªüng',
              content: {
                'application/json': {
                  schema: {
                    type: 'array',
                    items: { $ref: '#/components/schemas/ShopOrder' }
                  }
                }
              }
            }
          }
        }
      },
      '/api/shop/orders': {
        get: {
          summary: 'L·∫•y t·∫•t c·∫£ ƒë∆°n ƒë·ªïi th∆∞·ªüng (üü° ADMIN)',
          tags: ['üõí Shop'],
          security: [{ bearerAuth: [] }],
          responses: {
            200: {
              description: 'Danh s√°ch ƒë∆°n ƒë·ªïi th∆∞·ªüng',
              content: {
                'application/json': {
                  schema: {
                    type: 'array',
                    items: { $ref: '#/components/schemas/ShopOrder' }
                  }
                }
              }
            }
          }
        }
      },
      '/api/shop/orders/{id}': {
        put: {
          summary: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n ƒë·ªïi th∆∞·ªüng (üü° ADMIN)',
          tags: ['üõí Shop'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' }
            }
          ],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    status: { 
                      type: 'string',
                      enum: ['pending', 'confirmed', 'delivered', 'cancelled'],
                      example: 'confirmed'
                    },
                    notes: { type: 'string', example: 'ƒê√£ x√°c nh·∫≠n v√† chu·∫©n b·ªã giao h√†ng' }
                  }
                }
              }
            }
          },
          responses: {
            200: {
              description: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng'
            }
          }
        }
      },
      '/api/shop/circulation': {
        get: {
          summary: 'L·∫•y th√¥ng tin l∆∞u th√¥ng BeePoint (üü° ADMIN)',
          tags: ['üõí Shop'],
          security: [{ bearerAuth: [] }],
          responses: {
            200: {
              description: 'Th√¥ng tin l∆∞u th√¥ng BeePoint',
              content: {
                'application/json': {
                  schema: { $ref: '#/components/schemas/BeePointCirculation' }
                }
              }
            }
          }
        },
        put: {
          summary: 'C·∫≠p nh·∫≠t l∆∞u th√¥ng BeePoint (üî¥ SUPER_ADMIN)',
          tags: ['üõí Shop'],
          security: [{ bearerAuth: [] }],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    totalSupply: { type: 'integer', example: 1000000 },
                    distributedPoints: { type: 'integer', example: 50000 },
                    availablePoints: { type: 'integer', example: 950000 }
                  }
                }
              }
            }
          },
          responses: {
            200: {
              description: 'C·∫≠p nh·∫≠t l∆∞u th√¥ng th√†nh c√¥ng'
            }
          }
        }
      }
    },
    components: {
      securitySchemes: {
        bearerAuth: {
          type: 'http',
          scheme: 'bearer',
          bearerFormat: 'JWT',
        },
        ApiKeyAuth: {
          type: 'apiKey',
          in: 'header',
          name: 'x-api-key',
        },
      },
      schemas: {
        Error: {
          type: 'object',
          properties: {
            message: { type: 'string' },
            errors: { type: 'array', items: { type: 'object' } },
          },
        },
        LoginRequest: {
          type: 'object',
          required: ['username', 'password'],
          properties: {
            username: { type: 'string', example: 'admin' },
            password: { type: 'string', example: 'password123' },
          },
        },
        User: {
          type: 'object',
          properties: {
            id: { type: 'integer' },
            username: { type: 'string' },
            email: { type: 'string' },
            fullName: { type: 'string' },
            role: { $ref: '#/components/schemas/Role' },
            mustChangePassword: { type: 'boolean' },
            avatarUrl: { type: 'string', nullable: true },
            bio: { type: 'string', nullable: true },
            phone: { type: 'string', nullable: true },
            facebookUrl: { type: 'string', nullable: true },
            instagramUrl: { type: 'string', nullable: true },
            tiktokUrl: { type: 'string', nullable: true },
            youtubeUrl: { type: 'string', nullable: true },
            linkedinUrl: { type: 'string', nullable: true },
            githubUrl: { type: 'string', nullable: true },
            lastLogin: { type: 'string', format: 'date-time', nullable: true },
            createdAt: { type: 'string', format: 'date-time' },
            member: {
              type: 'object',
              nullable: true,
              properties: {
                id: { type: 'integer' },
                studentId: { type: 'string', nullable: true },
                class: { type: 'string' },
                divisionId: { type: 'integer' },
                positionId: { type: 'integer' },
                academicYearId: { type: 'integer' },
                memberType: { type: 'string', enum: ['active', 'alumni'] },
                joinDate: { type: 'string' },
                notes: { type: 'string', nullable: true }
              }
            },
            beePoints: {
              type: 'object',
              nullable: true,
              properties: {
                currentPoints: { type: 'integer' },
                totalEarned: { type: 'integer' },
                totalSpent: { type: 'integer' }
              }
            }
          },
        },
        Role: {
          type: 'object',
          properties: {
            id: { type: 'integer' },
            name: { type: 'string', example: 'admin' },
            displayName: { type: 'string', example: 'Qu·∫£n tr·ªã vi√™n' },
            description: { type: 'string', example: 'Qu·∫£n l√Ω to√†n b·ªô h·ªá th·ªëng' },
            permissions: { 
              type: 'array', 
              items: { type: 'string' },
              example: ['users:view', 'users:create', 'members:view', 'members:create']
            },
            isActive: { type: 'boolean' },
            createdAt: { type: 'string', format: 'date-time' },
            updatedAt: { type: 'string', format: 'date-time' }
          }
        },
        Member: {
          type: 'object',
          properties: {
            id: { type: 'integer' },
            fullName: { type: 'string' },
            studentId: { type: 'string' },
            email: { type: 'string' },
            phone: { type: 'string' },
            class: { type: 'string' },
            divisionId: { type: 'integer' },
            positionId: { type: 'integer' },
            academicYearId: { type: 'integer' },
            memberType: { type: 'string', enum: ['active', 'alumni'] },
            joinDate: { type: 'string', format: 'date' },
            notes: { type: 'string' },
            userId: { type: 'integer' },
            isActive: { type: 'boolean' },
            createdAt: { type: 'string', format: 'date-time' },
            division: {
              type: 'object',
              properties: {
                id: { type: 'integer' },
                name: { type: 'string' },
                color: { type: 'string' },
                icon: { type: 'string' }
              }
            },
            position: {
              type: 'object',
              properties: {
                id: { type: 'integer' },
                name: { type: 'string' },
                displayName: { type: 'string' },
                level: { type: 'integer' }
              }
            },
            academicYear: {
              type: 'object',
              properties: {
                id: { type: 'integer' },
                name: { type: 'string' }
              }
            },
            user: {
              type: 'object',
              properties: {
                id: { type: 'integer' },
                username: { type: 'string' },
                fullName: { type: 'string' },
                email: { type: 'string' }
              }
            }
          },
        },
        Setting: {
          type: 'object',
          properties: {
            id: { type: 'integer' },
            key: { type: 'string' },
            value: { type: 'string' },
            description: { type: 'string' },
            updatedAt: { type: 'string', format: 'date-time' }
          }
        },
        Mission: {
          type: 'object',
          properties: {
            id: { type: 'integer' },
            title: { type: 'string' },
            description: { type: 'string' },
            category: { type: 'string', enum: ['daily', 'weekly', 'monthly', 'special', 'project'] },
            type: { type: 'string', enum: ['one_time', 'repeatable'] },
            maxParticipants: { type: 'integer', nullable: true },
            currentParticipants: { type: 'integer' },
            beePointsReward: { type: 'integer' },
            requiresPhoto: { type: 'boolean' },
            startDate: { type: 'string', format: 'date-time', nullable: true },
            endDate: { type: 'string', format: 'date-time', nullable: true },
            priority: { type: 'string', enum: ['low', 'medium', 'high', 'urgent'] },
            status: { type: 'string', enum: ['active', 'paused', 'completed', 'cancelled'] },
            tags: { type: 'array', items: { type: 'string' } },
            createdAt: { type: 'string', format: 'date-time' },
            createdBy: {
              type: 'object',
              properties: {
                id: { type: 'integer' },
                fullName: { type: 'string' },
                username: { type: 'string' }
              }
            }
          }
        },
        MissionAssignment: {
          type: 'object',
          properties: {
            id: { type: 'integer' },
            missionId: { type: 'integer' },
            userId: { type: 'integer' },
            status: { type: 'string', enum: ['assigned', 'in_progress', 'completed', 'submitted', 'rejected'] },
            assignedDate: { type: 'string', format: 'date-time' },
            completedDate: { type: 'string', format: 'date-time', nullable: true },
            submissionNote: { type: 'string', nullable: true },
            reviewNote: { type: 'string', nullable: true },
            pointsAwarded: { type: 'integer' },
            user: {
              type: 'object',
              properties: {
                id: { type: 'integer' },
                fullName: { type: 'string' },
                username: { type: 'string' }
              }
            }
          }
        },
        ShopProduct: {
          type: 'object',
          properties: {
            id: { type: 'integer', example: 1 },
            name: { type: 'string', example: '√Åo thun CLB S√°ng t·∫°o' },
            description: { type: 'string', example: '√Åo thun ch·∫•t l∆∞·ª£ng cao v·ªõi logo CLB' },
            beePointsCost: { type: 'integer', example: 50 },
            category: { type: 'string', example: 'fashion' },
            imageUrl: { type: 'string', example: 'https://example.com/product.jpg' },
            stockQuantity: { type: 'integer', example: 100 },
            isActive: { type: 'boolean', example: true },
            createdAt: { type: 'string', format: 'date-time' },
            updatedAt: { type: 'string', format: 'date-time' }
          }
        },
        InsertShopProduct: {
          type: 'object',
          required: ['name', 'description', 'beePointsCost', 'category'],
          properties: {
            name: { type: 'string', example: '√Åo thun CLB S√°ng t·∫°o' },
            description: { type: 'string', example: '√Åo thun ch·∫•t l∆∞·ª£ng cao v·ªõi logo CLB' },
            beePointsCost: { type: 'integer', example: 50 },
            category: { type: 'string', example: 'fashion' },
            imageUrl: { type: 'string', example: 'https://example.com/product.jpg' },
            stockQuantity: { type: 'integer', example: 100 },
            isActive: { type: 'boolean', default: true }
          }
        },
        ShopOrder: {
          type: 'object',
          properties: {
            id: { type: 'integer', example: 1 },
            userId: { type: 'integer', example: 2 },
            productId: { type: 'integer', example: 1 },
            quantity: { type: 'integer', example: 1 },
            totalBeePointsCost: { type: 'integer', example: 50 },
            status: { 
              type: 'string', 
              enum: ['pending', 'confirmed', 'delivered', 'cancelled'],
              example: 'pending'
            },
            deliveryInfo: { type: 'string', example: 'ƒê·ªãa ch·ªâ: 123 ƒê∆∞·ªùng ABC' },
            notes: { type: 'string', example: 'Ghi ch√∫ admin' },
            createdAt: { type: 'string', format: 'date-time' },
            updatedAt: { type: 'string', format: 'date-time' }
          }
        },
        BeePointCirculation: {
          type: 'object',
          properties: {
            id: { type: 'integer', example: 1 },
            totalSupply: { type: 'integer', example: 1000000 },
            distributedPoints: { type: 'integer', example: 50000 },
            availablePoints: { type: 'integer', example: 950000 },
            lastUpdated: { type: 'string', format: 'date-time' }
          }
        },
      },
    },
    tags: [
      { name: 'üü¢ Public', description: 'API c√¥ng khai' },
      { name: 'üîê Authentication', description: 'X√°c th·ª±c' },
      { name: 'üë• Users', description: 'Qu·∫£n l√Ω ng∆∞·ªùi d√πng h·ªá th·ªëng (üü° ADMIN)' },
      { name: 'üîí Roles', description: 'Qu·∫£n l√Ω vai tr√≤ v√† ph√¢n quy·ªÅn (üî¥ SUPER_ADMIN)' },
      { name: 'üéì Members', description: 'Qu·∫£n l√Ω th√†nh vi√™n' },
      { name: 'üè¢ Departments', description: 'Qu·∫£n l√Ω ban' },
      { name: 'üëë Positions', description: 'Qu·∫£n l√Ω ch·ª©c v·ª• (üî¥ SUPER_ADMIN)' },
      { name: 'üìã Divisions', description: 'Qu·∫£n l√Ω ban ph·ª• tr√°ch (üî¥ SUPER_ADMIN)' },
      { name: 'üìÖ Academic Years', description: 'Qu·∫£n l√Ω kh√≥a h·ªçc (üî¥ SUPER_ADMIN)' },
      { name: 'üèÜ Achievements', description: 'H·ªá th·ªëng th√†nh t√≠ch' },
      { name: 'üçØ BeePoints', description: 'H·ªá th·ªëng ƒëi·ªÉm th∆∞·ªüng' },
      { name: 'üõí Shop', description: 'C·ª≠a h√†ng ƒë·ªïi th∆∞·ªüng BeePoints' },
      { name: 'üéØ Missions', description: 'H·ªá th·ªëng nhi·ªám v·ª• v√† th∆∞·ªüng ƒëi·ªÉm' },
      { name: '‚öôÔ∏è Settings', description: 'Qu·∫£n l√Ω c·∫•u h√¨nh h·ªá th·ªëng (üî¥ SUPER_ADMIN)' },
      { name: 'üìä Statistics', description: 'Th·ªëng k√™' },
      { name: 'üîë API Keys', description: 'Qu·∫£n l√Ω API keys (üü° ADMIN)' },
      { name: 'üåê External API', description: 'API cho ·ª©ng d·ª•ng th·ª© 3' },
    ],
    paths: {
      // ===== SHOP & REWARD EXCHANGE API =====
      '/api/shop/products': {
        get: {
          summary: 'L·∫•y danh s√°ch s·∫£n ph·∫©m c·ª≠a h√†ng',
          tags: ['üõí Shop'],
          responses: {
            200: {
              description: 'Danh s√°ch ng∆∞·ªùi d√πng',
              content: {
                'application/json': {
                  schema: {
                    type: 'array',
                    items: { $ref: '#/components/schemas/User' }
                  }
                }
              }
            }
          }
        }
      },
      '/api/auth/login': {
        post: {
          summary: 'ƒêƒÉng nh·∫≠p h·ªá th·ªëng',
          tags: ['üîê Authentication'],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/LoginRequest' }
              }
            }
          },
          responses: {
            200: {
              description: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
              content: {
                'application/json': {
                  schema: {
                    type: 'object',
                    properties: {
                      token: { type: 'string' },
                      user: { $ref: '#/components/schemas/User' }
                    }
                  }
                }
              }
            },
            401: {
              description: 'Th√¥ng tin ƒëƒÉng nh·∫≠p sai',
              content: {
                'application/json': {
                  schema: { $ref: '#/components/schemas/Error' }
                }
              }
            }
          }
        }
      },
      '/api/auth/check-init': {
        get: {
          summary: 'Ki·ªÉm tra h·ªá th·ªëng c√≥ c·∫ßn kh·ªüi t·∫°o kh√¥ng',
          tags: ['üîê Authentication'],
          responses: {
            200: {
              description: 'Tr·∫°ng th√°i kh·ªüi t·∫°o h·ªá th·ªëng',
              content: {
                'application/json': {
                  schema: {
                    type: 'object',
                    properties: {
                      needsInit: { type: 'boolean', example: false }
                    }
                  }
                }
              }
            }
          }
        }
      },
      '/api/auth/me': {
        get: {
          summary: 'L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i',
          tags: ['üîê Authentication'],
          security: [{ bearerAuth: [] }],
          responses: {
            200: {
              description: 'Th√¥ng tin ng∆∞·ªùi d√πng',
              content: {
                'application/json': {
                  schema: { $ref: '#/components/schemas/User' }
                }
              }
            },
            401: {
              description: 'Ch∆∞a ƒëƒÉng nh·∫≠p',
              content: {
                'application/json': {
                  schema: { $ref: '#/components/schemas/Error' }
                }
              }
            }
          }
        }
      },
      '/api/auth/logout': {
        post: {
          summary: 'ƒêƒÉng xu·∫•t',
          tags: ['üîê Authentication'],
          security: [{ bearerAuth: [] }],
          responses: {
            200: {
              description: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng',
              content: {
                'application/json': {
                  schema: {
                    type: 'object',
                    properties: {
                      message: { type: 'string', example: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng' }
                    }
                  }
                }
              }
            }
          }
        }
      },
      '/api/admin/roles': {
        get: {
          summary: 'L·∫•y danh s√°ch vai tr√≤ (üî¥ SUPER_ADMIN)',
          tags: ['üîí Roles'],
          security: [{ bearerAuth: [] }],
          responses: {
            200: {
              description: 'Danh s√°ch vai tr√≤',
              content: {
                'application/json': {
                  schema: {
                    type: 'array',
                    items: { $ref: '#/components/schemas/Role' }
                  }
                }
              }
            }
          }
        },
        post: {
          summary: 'T·∫°o vai tr√≤ m·ªõi (üî¥ SUPER_ADMIN)',
          tags: ['üîí Roles'],
          security: [{ bearerAuth: [] }],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  required: ['name', 'displayName', 'permissions'],
                  properties: {
                    name: { type: 'string', example: 'content_manager' },
                    displayName: { type: 'string', example: 'Qu·∫£n l√Ω n·ªôi dung' },
                    description: { type: 'string', example: 'Qu·∫£n l√Ω b√†i vi·∫øt v√† n·ªôi dung website' },
                    permissions: { 
                      type: 'array', 
                      items: { type: 'string' }, 
                      example: ['members:view', 'members:create', 'achievements:view'] 
                    }
                  }
                }
              }
            }
          },
          responses: {
            201: {
              description: 'Vai tr√≤ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
              content: {
                'application/json': {
                  schema: { $ref: '#/components/schemas/Role' }
                }
              }
            }
          }
        }
      },
      '/api/admin/roles/{id}': {
        get: {
          summary: 'L·∫•y th√¥ng tin vai tr√≤ (üî¥ SUPER_ADMIN)',
          tags: ['üîí Roles'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' }
            }
          ],
          responses: {
            200: {
              description: 'Th√¥ng tin vai tr√≤',
              content: {
                'application/json': {
                  schema: { $ref: '#/components/schemas/Role' }
                }
              }
            }
          }
        },
        put: {
          summary: 'C·∫≠p nh·∫≠t vai tr√≤ (üî¥ SUPER_ADMIN)',
          tags: ['üîí Roles'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' }
            }
          ],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    displayName: { type: 'string' },
                    description: { type: 'string' },
                    permissions: { 
                      type: 'array', 
                      items: { type: 'string' } 
                    }
                  }
                }
              }
            }
          },
          responses: {
            200: {
              description: 'Vai tr√≤ ƒë∆∞·ª£c c·∫≠p nh·∫≠t',
              content: {
                'application/json': {
                  schema: { $ref: '#/components/schemas/Role' }
                }
              }
            }
          }
        },
        delete: {
          summary: 'X√≥a vai tr√≤ (üî¥ SUPER_ADMIN)',
          tags: ['üîí Roles'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' }
            }
          ],
          responses: {
            200: {
              description: 'Vai tr√≤ ƒë∆∞·ª£c x√≥a',
              content: {
                'application/json': {
                  schema: {
                    type: 'object',
                    properties: {
                      message: { type: 'string' }
                    }
                  }
                }
              }
            }
          }
        }
      },
      '/api/auth/change-password': {
        post: {
          summary: 'ƒê·ªïi m·∫≠t kh·∫©u (üîµ USER)',
          tags: ['üîê Authentication'],
          security: [{ bearerAuth: [] }],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  required: ['currentPassword', 'newPassword'],
                  properties: {
                    currentPassword: { type: 'string', example: 'password123' },
                    newPassword: { type: 'string', example: 'newpassword123', minLength: 6 }
                  }
                }
              }
            }
          },
          responses: {
            200: {
              description: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng',
              content: {
                'application/json': {
                  schema: {
                    type: 'object',
                    properties: {
                      message: { type: 'string' }
                    }
                  }
                }
              }
            },
            400: {
              description: 'M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ch√≠nh x√°c ho·∫∑c m·∫≠t kh·∫©u m·ªõi kh√¥ng h·ª£p l·ªá'
            }
          }
        }
      },
      '/api/auth/profile': {
        put: {
          summary: 'C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n (üîµ USER)',
          tags: ['üîê Authentication'],
          security: [{ bearerAuth: [] }],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    fullName: { type: 'string', example: 'Nguy·ªÖn VƒÉn A' },
                    email: { type: 'string', example: 'user@example.com' },
                    bio: { type: 'string', example: 'M√¥ t·∫£ b·∫£n th√¢n' },
                    phone: { type: 'string', example: '0987654321' },
                    avatarUrl: { type: 'string', example: 'https://example.com/avatar.jpg' },
                    facebookUrl: { type: 'string', example: 'https://facebook.com/username' },
                    instagramUrl: { type: 'string', example: 'https://instagram.com/username' },
                    tiktokUrl: { type: 'string', example: 'https://tiktok.com/@username' },
                    youtubeUrl: { type: 'string', example: 'https://youtube.com/c/username' },
                    linkedinUrl: { type: 'string', example: 'https://linkedin.com/in/username' },
                    githubUrl: { type: 'string', example: 'https://github.com/username' }
                  }
                }
              }
            }
          },
          responses: {
            200: {
              description: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng',
              content: {
                'application/json': {
                  schema: { $ref: '#/components/schemas/User' }
                }
              }
            }
          }
        }
      },
      '/api/users/{id}/reset-password': {
        post: {
          summary: 'Reset m·∫≠t kh·∫©u ng∆∞·ªùi d√πng (üî¥ SUPER_ADMIN)',
          tags: ['üë• Users'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' }
            }
          ],
          responses: {
            200: {
              description: 'Reset m·∫≠t kh·∫©u th√†nh c√¥ng',
              content: {
                'application/json': {
                  schema: {
                    type: 'object',
                    properties: {
                      message: { type: 'string' },
                      username: { type: 'string' },
                      newPassword: { type: 'string' }
                    }
                  }
                }
              }
            }
          }
        }
      },
      '/api/settings': {
        get: {
          summary: 'L·∫•y t·∫•t c·∫£ c·∫•u h√¨nh h·ªá th·ªëng (üî¥ SUPER_ADMIN)',
          tags: ['‚öôÔ∏è Settings'],
          security: [{ bearerAuth: [] }],
          responses: {
            200: {
              description: 'Danh s√°ch c·∫•u h√¨nh',
              content: {
                'application/json': {
                  schema: {
                    type: 'array',
                    items: { $ref: '#/components/schemas/Setting' }
                  }
                }
              }
            }
          }
        },
        post: {
          summary: 'T·∫°o c·∫•u h√¨nh m·ªõi (üî¥ SUPER_ADMIN)',
          tags: ['‚öôÔ∏è Settings'],
          security: [{ bearerAuth: [] }],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  required: ['key', 'value'],
                  properties: {
                    key: { type: 'string', example: 'beepoint_total_supply' },
                    value: { type: 'string', example: '1000000' },
                    description: { type: 'string', example: 'T·ªïng cung BeePoint trong h·ªá th·ªëng' }
                  }
                }
              }
            }
          },
          responses: {
            201: {
              description: 'T·∫°o c·∫•u h√¨nh th√†nh c√¥ng',
              content: {
                'application/json': {
                  schema: { $ref: '#/components/schemas/Setting' }
                }
              }
            }
          }
        }
      },
      '/api/settings/{key}': {
        get: {
          summary: 'L·∫•y c·∫•u h√¨nh theo key (üî¥ SUPER_ADMIN)',
          tags: ['‚öôÔ∏è Settings'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'key',
              required: true,
              schema: { type: 'string' }
            }
          ],
          responses: {
            200: {
              description: 'Th√¥ng tin c·∫•u h√¨nh',
              content: {
                'application/json': {
                  schema: { $ref: '#/components/schemas/Setting' }
                }
              }
            }
          }
        },
        put: {
          summary: 'C·∫≠p nh·∫≠t c·∫•u h√¨nh (üî¥ SUPER_ADMIN)',
          tags: ['‚öôÔ∏è Settings'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'key',
              required: true,
              schema: { type: 'string' }
            }
          ],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    value: { type: 'string' },
                    description: { type: 'string' }
                  }
                }
              }
            }
          },
          responses: {
            200: {
              description: 'C·∫≠p nh·∫≠t c·∫•u h√¨nh th√†nh c√¥ng',
              content: {
                'application/json': {
                  schema: { $ref: '#/components/schemas/Setting' }
                }
              }
            }
          }
        }
      },
      '/api/beepoint/config': {
        get: {
          summary: 'L·∫•y c·∫•u h√¨nh BeePoint (üîµ USER)',
          tags: ['üèÜ BeePoint'],
          security: [{ bearerAuth: [] }],
          responses: {
            200: {
              description: 'C·∫•u h√¨nh BeePoint',
              content: {
                'application/json': {
                  schema: {
                    type: 'object',
                    properties: {
                      totalSupply: { type: 'integer', example: 1000000 },
                      exchangeRate: { type: 'number', example: 1.0 },
                      welcomeBonus: { type: 'integer', example: 100 },
                      activityMultiplier: { type: 'number', example: 1.0 }
                    }
                  }
                }
              }
            }
          }
        },
        put: {
          summary: 'C·∫≠p nh·∫≠t c·∫•u h√¨nh BeePoint (üî¥ SUPER_ADMIN)',
          tags: ['üèÜ BeePoint'],
          security: [{ bearerAuth: [] }],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    totalSupply: { type: 'integer', example: 1000000 },
                    exchangeRate: { type: 'number', example: 1.0 },
                    welcomeBonus: { type: 'integer', example: 100 },
                    activityMultiplier: { type: 'number', example: 1.0 }
                  }
                }
              }
            }
          },
          responses: {
            200: {
              description: 'C·∫≠p nh·∫≠t c·∫•u h√¨nh BeePoint th√†nh c√¥ng',
              content: {
                'application/json': {
                  schema: {
                    type: 'object',
                    properties: {
                      message: { type: 'string' }
                    }
                  }
                }
              }
            }
          }
        }
      },
      '/api/beepoint/init': {
        post: {
          summary: 'Kh·ªüi t·∫°o c·∫•u h√¨nh BeePoint m·∫∑c ƒë·ªãnh (üî¥ SUPER_ADMIN)',
          tags: ['üèÜ BeePoint'],
          security: [{ bearerAuth: [] }],
          responses: {
            200: {
              description: 'Kh·ªüi t·∫°o c·∫•u h√¨nh BeePoint th√†nh c√¥ng',
              content: {
                'application/json': {
                  schema: {
                    type: 'object',
                    properties: {
                      message: { type: 'string' }
                    }
                  }
                }
              }
            }
          }
        }
      },
      '/api/members': {
        get: {
          summary: 'L·∫•y danh s√°ch th√†nh vi√™n',
          tags: ['üéì Members'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'query',
              name: 'search',
              schema: { type: 'string' },
              description: 'T√¨m ki·∫øm theo t√™n, m√£ h·ªçc sinh'
            },
            {
              in: 'query',
              name: 'type',
              schema: { type: 'string', enum: ['active', 'alumni'] },
              description: 'Lo·∫°i th√†nh vi√™n'
            }
          ],
          responses: {
            200: {
              description: 'Danh s√°ch th√†nh vi√™n',
              content: {
                'application/json': {
                  schema: {
                    type: 'array',
                    items: { $ref: '#/components/schemas/Member' }
                  }
                }
              }
            }
          }
        },
        post: {
          summary: 'T·∫°o th√†nh vi√™n m·ªõi (üü° ADMIN)',
          tags: ['üéì Members'],
          security: [{ bearerAuth: [] }],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  required: ['fullName', 'class', 'divisionId', 'positionId', 'academicYearId', 'memberType', 'joinDate'],
                  properties: {
                    fullName: { type: 'string', example: 'Nguy·ªÖn VƒÉn A' },
                    studentId: { type: 'string', example: 'HS001' },
                    email: { type: 'string', example: 'student@example.com' },
                    phone: { type: 'string', example: '0987654321' },
                    class: { type: 'string', example: '12A1' },
                    divisionId: { type: 'integer', example: 1 },
                    positionId: { type: 'integer', example: 1 },
                    academicYearId: { type: 'integer', example: 1 },
                    memberType: { type: 'string', enum: ['active', 'alumni'] },
                    joinDate: { type: 'string', format: 'date', example: '2024-11-01' },
                    notes: { type: 'string', example: 'Ghi ch√∫ v·ªÅ th√†nh vi√™n' },
                    createUserAccount: { type: 'boolean', example: false }
                  }
                }
              }
            }
          },
          responses: {
            201: {
              description: 'Th√†nh vi√™n ƒë∆∞·ª£c t·∫°o',
              content: {
                'application/json': {
                  schema: { $ref: '#/components/schemas/Member' }
                }
              }
            }
          }
        }
      },
      '/api/members/{id}': {
        put: {
          summary: 'C·∫≠p nh·∫≠t th√†nh vi√™n (üü° ADMIN)',
          tags: ['üéì Members'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' }
            }
          ],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    fullName: { type: 'string', example: 'Nguy·ªÖn VƒÉn A' },
                    studentId: { type: 'string', example: 'HS001' },
                    email: { type: 'string', example: 'student@example.com' },
                    phone: { type: 'string', example: '0987654321' },
                    class: { type: 'string', example: '12A1' },
                    divisionId: { type: 'integer', example: 1 },
                    positionId: { type: 'integer', example: 1 },
                    academicYearId: { type: 'integer', example: 1 },
                    memberType: { type: 'string', enum: ['active', 'alumni'] },
                    joinDate: { type: 'string', format: 'date', example: '2024-11-01' },
                    notes: { type: 'string', example: 'Ghi ch√∫ v·ªÅ th√†nh vi√™n' },
                    isActive: { type: 'boolean', example: true }
                  }
                }
              }
            }
          },
          responses: {
            200: {
              description: 'Th√†nh vi√™n ƒë∆∞·ª£c c·∫≠p nh·∫≠t',
              content: {
                'application/json': {
                  schema: { $ref: '#/components/schemas/Member' }
                }
              }
            }
          }
        },
        delete: {
          summary: 'X√≥a th√†nh vi√™n (üü° ADMIN)',
          tags: ['üéì Members'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' }
            }
          ],
          responses: {
            200: {
              description: 'Th√†nh vi√™n ƒë∆∞·ª£c x√≥a',
              content: {
                'application/json': {
                  schema: {
                    type: 'object',
                    properties: {
                      message: { type: 'string' }
                    }
                  }
                }
              }
            }
          }
        }
      },
      '/api/departments': {
        get: {
          summary: 'L·∫•y danh s√°ch ban',
          tags: ['üè¢ Departments'],
          security: [{ bearerAuth: [] }],
          responses: {
            200: {
              description: 'Danh s√°ch ban',
              content: {
                'application/json': {
                  schema: {
                    type: 'array',
                    items: {
                      type: 'object',
                      properties: {
                        id: { type: 'integer' },
                        name: { type: 'string' },
                        icon: { type: 'string' },
                        color: { type: 'string' }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      '/api/positions': {
        get: {
          summary: 'L·∫•y danh s√°ch ch·ª©c v·ª•',
          tags: ['üëë Positions'],
          security: [{ bearerAuth: [] }],
          responses: {
            200: {
              description: 'Danh s√°ch ch·ª©c v·ª•',
              content: {
                'application/json': {
                  schema: {
                    type: 'array',
                    items: {
                      type: 'object',
                      properties: {
                        id: { type: 'integer' },
                        name: { type: 'string' },
                        displayName: { type: 'string' },
                        level: { type: 'integer' }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        post: {
          summary: 'T·∫°o ch·ª©c v·ª• m·ªõi (üî¥ SUPER_ADMIN)',
          tags: ['üëë Positions'],
          security: [{ bearerAuth: [] }],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  required: ['name', 'displayName', 'level'],
                  properties: {
                    name: { type: 'string', example: 'vice-president' },
                    displayName: { type: 'string', example: 'Ph√≥ ch·ªß nhi·ªám' },
                    level: { type: 'integer', example: 90 },
                    description: { type: 'string' },
                    color: { type: 'string', example: '#10B981' }
                  }
                }
              }
            }
          },
          responses: {
            201: {
              description: 'Ch·ª©c v·ª• ƒë∆∞·ª£c t·∫°o',
              content: {
                'application/json': {
                  schema: {
                    type: 'object',
                    properties: {
                      id: { type: 'integer' },
                      name: { type: 'string' },
                      displayName: { type: 'string' },
                      level: { type: 'integer' }
                    }
                  }
                }
              }
            }
          }
        }
      },
      '/api/positions/{id}': {
        put: {
          summary: 'C·∫≠p nh·∫≠t ch·ª©c v·ª• (üî¥ SUPER_ADMIN)',
          tags: ['üëë Positions'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' }
            }
          ],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    displayName: { type: 'string' },
                    level: { type: 'integer' },
                    description: { type: 'string' },
                    color: { type: 'string' }
                  }
                }
              }
            }
          },
          responses: {
            200: {
              description: 'Ch·ª©c v·ª• ƒë∆∞·ª£c c·∫≠p nh·∫≠t'
            }
          }
        },
        delete: {
          summary: 'X√≥a ch·ª©c v·ª• (üî¥ SUPER_ADMIN)',
          tags: ['üëë Positions'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' }
            }
          ],
          responses: {
            200: {
              description: 'Ch·ª©c v·ª• ƒë∆∞·ª£c x√≥a'
            }
          }
        }
      },
      '/api/divisions': {
        get: {
          summary: 'L·∫•y danh s√°ch ban ph·ª• tr√°ch',
          tags: ['üìã Divisions'],
          security: [{ bearerAuth: [] }],
          responses: {
            200: {
              description: 'Danh s√°ch ban ph·ª• tr√°ch'
            }
          }
        },
        post: {
          summary: 'T·∫°o ban ph·ª• tr√°ch m·ªõi (üî¥ SUPER_ADMIN)',
          tags: ['üìã Divisions'],
          security: [{ bearerAuth: [] }],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  required: ['name'],
                  properties: {
                    name: { type: 'string', example: 'Ban S·ª± ki·ªán' },
                    description: { type: 'string' },
                    color: { type: 'string', example: '#8B5CF6' },
                    icon: { type: 'string', example: 'Calendar' }
                  }
                }
              }
            }
          },
          responses: {
            201: {
              description: 'Ban ph·ª• tr√°ch ƒë∆∞·ª£c t·∫°o'
            }
          }
        }
      },
      '/api/divisions/{id}': {
        put: {
          summary: 'C·∫≠p nh·∫≠t ban ph·ª• tr√°ch (üî¥ SUPER_ADMIN)',
          tags: ['üìã Divisions'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' }
            }
          ],
          responses: {
            200: {
              description: 'Ban ph·ª• tr√°ch ƒë∆∞·ª£c c·∫≠p nh·∫≠t'
            }
          }
        },
        delete: {
          summary: 'X√≥a ban ph·ª• tr√°ch (üî¥ SUPER_ADMIN)',
          tags: ['üìã Divisions'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' }
            }
          ],
          responses: {
            200: {
              description: 'Ban ph·ª• tr√°ch ƒë∆∞·ª£c x√≥a'
            }
          }
        }
      },
      '/api/academic-years': {
        get: {
          summary: 'L·∫•y danh s√°ch kh√≥a h·ªçc',
          tags: ['üìÖ Academic Years'],
          security: [{ bearerAuth: [] }],
          responses: {
            200: {
              description: 'Danh s√°ch kh√≥a h·ªçc (t·ª´ 11/nƒÉm n√†y ƒë·∫øn 11/nƒÉm sau)'
            }
          }
        },
        post: {
          summary: 'T·∫°o kh√≥a h·ªçc m·ªõi (üî¥ SUPER_ADMIN)',
          tags: ['üìÖ Academic Years'],
          security: [{ bearerAuth: [] }],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  required: ['name', 'startDate', 'endDate'],
                  properties: {
                    name: { type: 'string', example: 'Kh√≥a 2025-2026' },
                    startDate: { type: 'string', format: 'date', example: '2025-11-01' },
                    endDate: { type: 'string', format: 'date', example: '2026-11-01' },
                    description: { type: 'string' }
                  }
                }
              }
            }
          },
          responses: {
            201: {
              description: 'Kh√≥a h·ªçc ƒë∆∞·ª£c t·∫°o'
            }
          }
        }
      },
      '/api/academic-years/{id}': {
        put: {
          summary: 'C·∫≠p nh·∫≠t kh√≥a h·ªçc (üî¥ SUPER_ADMIN)',
          tags: ['üìÖ Academic Years'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' }
            }
          ],
          responses: {
            200: {
              description: 'Kh√≥a h·ªçc ƒë∆∞·ª£c c·∫≠p nh·∫≠t'
            }
          }
        },
        delete: {
          summary: 'X√≥a kh√≥a h·ªçc (üî¥ SUPER_ADMIN)',
          tags: ['üìÖ Academic Years'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' }
            }
          ],
          responses: {
            200: {
              description: 'Kh√≥a h·ªçc ƒë∆∞·ª£c x√≥a'
            }
          }
        }
      },
      '/api/achievements': {
        get: {
          summary: 'L·∫•y danh s√°ch th√†nh t√≠ch',
          tags: ['üèÜ Achievements'],
          security: [{ bearerAuth: [] }],
          responses: {
            200: {
              description: 'Danh s√°ch th√†nh t√≠ch',
              content: {
                'application/json': {
                  schema: {
                    type: 'array',
                    items: {
                      type: 'object',
                      properties: {
                        id: { type: 'integer' },
                        title: { type: 'string' },
                        description: { type: 'string' },
                        category: { type: 'string', enum: ['academic', 'creative', 'leadership', 'participation', 'special'] },
                        level: { type: 'string', enum: ['bronze', 'silver', 'gold', 'special'] },
                        pointsReward: { type: 'integer' }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        post: {
          summary: 'T·∫°o th√†nh t√≠ch m·ªõi (üü° ADMIN)',
          tags: ['üèÜ Achievements'],
          security: [{ bearerAuth: [] }],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  required: ['title', 'category', 'level', 'pointsReward'],
                  properties: {
                    title: { type: 'string', example: 'Th√†nh vi√™n xu·∫•t s·∫Øc' },
                    description: { type: 'string', example: 'D√†nh cho th√†nh vi√™n c√≥ ƒë√≥ng g√≥p t√≠ch c·ª±c' },
                    category: { type: 'string', enum: ['academic', 'creative', 'leadership', 'participation', 'special'], example: 'participation' },
                    level: { type: 'string', enum: ['bronze', 'silver', 'gold', 'special'], example: 'gold' },
                    badgeIcon: { type: 'string', example: 'Trophy' },
                    badgeColor: { type: 'string', example: '#FFD700' },
                    pointsReward: { type: 'integer', example: 100 }
                  }
                }
              }
            }
          },
          responses: {
            201: {
              description: 'Th√†nh t√≠ch ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng'
            }
          }
        }
      },
      '/api/achievements/award': {
        post: {
          summary: 'Trao th√†nh t√≠ch cho ng∆∞·ªùi d√πng (üü° ADMIN)',
          tags: ['üèÜ Achievements'],
          security: [{ bearerAuth: [] }],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  required: ['userId', 'achievementId'],
                  properties: {
                    userId: { type: 'integer', example: 2 },
                    achievementId: { type: 'integer', example: 1 },
                    notes: { type: 'string', example: 'Ho√†n th√†nh xu·∫•t s·∫Øc d·ª± √°n th√°ng 11' }
                  }
                }
              }
            }
          },
          responses: {
            201: {
              description: 'Th√†nh t√≠ch ƒë∆∞·ª£c trao th√†nh c√¥ng (t·ª± ƒë·ªông c·ªông BeePoints)'
            }
          }
        }
      },
      '/api/achievements/me': {
        get: {
          summary: 'L·∫•y danh s√°ch th√†nh t√≠ch c·ªßa b·∫£n th√¢n',
          tags: ['üèÜ Achievements'],
          security: [{ bearerAuth: [] }],
          responses: {
            200: {
              description: 'Danh s√°ch th√†nh t√≠ch c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i'
            }
          }
        }
      },
      '/api/bee-points/me': {
        get: {
          summary: 'L·∫•y ƒëi·ªÉm BeePoints c·ªßa b·∫£n th√¢n',
          tags: ['üçØ BeePoints'],
          security: [{ bearerAuth: [] }],
          responses: {
            200: {
              description: 'Th√¥ng tin ƒëi·ªÉm BeePoints',
              content: {
                'application/json': {
                  schema: {
                    type: 'object',
                    properties: {
                      id: { type: 'integer' },
                      userId: { type: 'integer' },
                      currentPoints: { type: 'integer' },
                      totalEarned: { type: 'integer' },
                      totalSpent: { type: 'integer' }
                    }
                  }
                }
              }
            }
          }
        }
      },
      '/api/bee-points/add': {
        post: {
          summary: 'Th√™m ƒëi·ªÉm cho ng∆∞·ªùi d√πng (üü° ADMIN)',
          tags: ['üçØ BeePoints'],
          security: [{ bearerAuth: [] }],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  required: ['userId', 'amount', 'description'],
                  properties: {
                    userId: { type: 'integer', example: 2 },
                    amount: { type: 'integer', example: 50 },
                    description: { type: 'string', example: 'Th∆∞·ªüng ho√†n th√†nh nhi·ªám v·ª•' }
                  }
                }
              }
            }
          },
          responses: {
            200: {
              description: 'ƒêi·ªÉm ƒë∆∞·ª£c th√™m th√†nh c√¥ng'
            }
          }
        }
      },
      '/api/bee-points/transactions': {
        get: {
          summary: 'L·∫•y l·ªãch s·ª≠ giao d·ªãch ƒëi·ªÉm',
          tags: ['üçØ BeePoints'],
          security: [{ bearerAuth: [] }],
          responses: {
            200: {
              description: 'L·ªãch s·ª≠ giao d·ªãch ƒëi·ªÉm'
            }
          }
        }
      },
      '/api/users': {
        get: {
          summary: 'L·∫•y danh s√°ch ng∆∞·ªùi d√πng h·ªá th·ªëng (üü° ADMIN)',
          tags: ['üë• Users'],
          security: [{ bearerAuth: [] }],
          responses: {
            200: {
              description: 'Danh s√°ch ng∆∞·ªùi d√πng h·ªá th·ªëng'
            }
          }
        },
        post: {
          summary: 'T·∫°o ng∆∞·ªùi d√πng m·ªõi (üü° ADMIN)',
          tags: ['üë• Users'],
          security: [{ bearerAuth: [] }],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  required: ['username', 'email', 'fullName', 'password', 'roleId'],
                  properties: {
                    username: { type: 'string', example: 'newuser' },
                    email: { type: 'string', example: 'newuser@example.com' },
                    fullName: { type: 'string', example: 'Nguy·ªÖn VƒÉn B' },
                    password: { type: 'string', example: 'password123' },
                    roleId: { type: 'integer', example: 2 }
                  }
                }
              }
            }
          },
          responses: {
            201: {
              description: 'Ng∆∞·ªùi d√πng ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng'
            }
          }
        }
      },
      '/api/users/{id}': {
        put: {
          summary: 'C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng (üü° ADMIN)',
          tags: ['üë• Users'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' }
            }
          ],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    email: { type: 'string' },
                    fullName: { type: 'string' },
                    roleId: { type: 'integer' },
                    isActive: { type: 'boolean' }
                  }
                }
              }
            }
          },
          responses: {
            200: {
              description: 'Ng∆∞·ªùi d√πng ƒë∆∞·ª£c c·∫≠p nh·∫≠t'
            }
          }
        },
        delete: {
          summary: 'X√≥a ng∆∞·ªùi d√πng (üü° ADMIN)',
          tags: ['üë• Users'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' }
            }
          ],
          responses: {
            200: {
              description: 'Ng∆∞·ªùi d√πng ƒë∆∞·ª£c x√≥a'
            }
          }
        }
      },
      '/api/users/{id}/change-password': {
        post: {
          summary: 'ƒê·ªïi m·∫≠t kh·∫©u ng∆∞·ªùi d√πng (üü° ADMIN)',
          tags: ['üë• Users'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' }
            }
          ],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  required: ['newPassword'],
                  properties: {
                    newPassword: { type: 'string', example: 'newpassword123' }
                  }
                }
              }
            }
          },
          responses: {
            200: {
              description: 'M·∫≠t kh·∫©u ƒë∆∞·ª£c ƒë·ªïi th√†nh c√¥ng'
            }
          }
        }
      },
      '/api/admin/api-keys': {
        get: {
          summary: 'L·∫•y danh s√°ch API keys (üü° ADMIN)',
          tags: ['üîë API Keys'],
          security: [{ bearerAuth: [] }],
          responses: {
            200: {
              description: 'Danh s√°ch API keys',
              content: {
                'application/json': {
                  schema: {
                    type: 'array',
                    items: {
                      type: 'object',
                      properties: {
                        id: { type: 'integer' },
                        name: { type: 'string' },
                        permissions: { type: 'array', items: { type: 'string' } },
                        isActive: { type: 'boolean' },
                        createdAt: { type: 'string', format: 'date-time' },
                        lastUsed: { type: 'string', format: 'date-time', nullable: true }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        post: {
          summary: 'T·∫°o API key m·ªõi (üü° ADMIN)',
          tags: ['üîë API Keys'],
          security: [{ bearerAuth: [] }],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  required: ['name', 'permissions'],
                  properties: {
                    name: { type: 'string', example: 'Mobile App API' },
                    permissions: { 
                      type: 'array', 
                      items: { type: 'string' }, 
                      example: ['members:view', 'stats:view', 'achievements:view'] 
                    }
                  }
                }
              }
            }
          },
          responses: {
            201: {
              description: 'API key ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng'
            }
          }
        }
      },
      '/api/admin/api-keys/{id}': {
        put: {
          summary: 'C·∫≠p nh·∫≠t API key (üü° ADMIN)',
          tags: ['üîë API Keys'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' }
            }
          ],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    permissions: { 
                      type: 'array', 
                      items: { type: 'string' }, 
                      example: ['members:view', 'stats:view'] 
                    }
                  }
                }
              }
            }
          },
          responses: {
            200: {
              description: 'API key ƒë∆∞·ª£c c·∫≠p nh·∫≠t'
            }
          }
        },
        delete: {
          summary: 'X√≥a API key (üü° ADMIN)',
          tags: ['üîë API Keys'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' }
            }
          ],
          responses: {
            200: {
              description: 'API key ƒë∆∞·ª£c x√≥a'
            }
          }
        }
      },
      '/api/stats': {
        get: {
          summary: 'L·∫•y th·ªëng k√™ c∆° b·∫£n',
          tags: ['üìä Statistics'],
          security: [{ bearerAuth: [] }],
          responses: {
            200: {
              description: 'Th·ªëng k√™ t·ªïng quan',
              content: {
                'application/json': {
                  schema: {
                    type: 'object',
                    properties: {
                      totalMembers: { type: 'integer' },
                      activeMembers: { type: 'integer' },
                      alumniMembers: { type: 'integer' },
                      totalDepartments: { type: 'integer' }
                    }
                  }
                }
              }
            }
          }
        }
      },
      '/api/dynamic-stats': {
        get: {
          summary: 'L·∫•y th·ªëng k√™ ƒë·ªông',
          tags: ['üìä Statistics'],
          security: [{ bearerAuth: [] }],
          responses: {
            200: {
              description: 'Th·ªëng k√™ ƒë·ªông',
              content: {
                'application/json': {
                  schema: {
                    type: 'array',
                    items: {
                      type: 'object',
                      properties: {
                        id: { type: 'integer' },
                        title: { type: 'string' },
                        value: { type: 'string' },
                        icon: { type: 'string' },
                        color: { type: 'string' },
                        isActive: { type: 'boolean' }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      '/api/external/achievements': {
        get: {
          summary: 'L·∫•y danh s√°ch th√†nh t√≠ch cho ·ª©ng d·ª•ng b√™n ngo√†i',
          tags: ['üåê External API'],
          security: [{ ApiKeyAuth: [] }],
          responses: {
            200: {
              description: 'Danh s√°ch th√†nh t√≠ch cho ·ª©ng d·ª•ng b√™n ngo√†i'
            }
          }
        }
      },
      '/api/external/stats': {
        get: {
          summary: 'L·∫•y th·ªëng k√™ cho ·ª©ng d·ª•ng b√™n ngo√†i',
          tags: ['üåê External API'],
          security: [{ ApiKeyAuth: [] }],
          responses: {
            200: {
              description: 'Th·ªëng k√™ cho ·ª©ng d·ª•ng b√™n ngo√†i'
            }
          }
        }
      },
      '/api/external/members': {
        get: {
          summary: 'L·∫•y danh s√°ch th√†nh vi√™n cho ·ª©ng d·ª•ng b√™n ngo√†i',
          tags: ['üåê External API'],
          security: [{ ApiKeyAuth: [] }],
          responses: {
            200: {
              description: 'Danh s√°ch th√†nh vi√™n cho ·ª©ng d·ª•ng b√™n ngo√†i'
            }
          }
        }
      },
      '/api/missions': {
        get: {
          summary: 'L·∫•y danh s√°ch nhi·ªám v·ª•',
          tags: ['üéØ Missions'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'query',
              name: 'status',
              schema: { type: 'string', enum: ['active', 'paused', 'completed', 'cancelled'] },
              description: 'L·ªçc theo tr·∫°ng th√°i'
            },
            {
              in: 'query',
              name: 'category',
              schema: { type: 'string', enum: ['daily', 'weekly', 'monthly', 'special', 'project'] },
              description: 'L·ªçc theo danh m·ª•c'
            },
            {
              in: 'query',
              name: 'type',
              schema: { type: 'string', enum: ['one_time', 'repeatable'] },
              description: 'L·ªçc theo lo·∫°i nhi·ªám v·ª•'
            }
          ],
          responses: {
            200: {
              description: 'Danh s√°ch nhi·ªám v·ª•',
              content: {
                'application/json': {
                  schema: {
                    type: 'array',
                    items: { $ref: '#/components/schemas/Mission' }
                  }
                }
              }
            }
          }
        },
        post: {
          summary: 'T·∫°o nhi·ªám v·ª• m·ªõi (üü° ADMIN)',
          tags: ['üéØ Missions'],
          security: [{ bearerAuth: [] }],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  required: ['title', 'category', 'type'],
                  properties: {
                    title: { type: 'string', example: 'Tham gia workshop s√°ng t·∫°o' },
                    description: { type: 'string', example: 'Tham gia workshop v·ªÅ k·ªπ nƒÉng s√°ng t·∫°o' },
                    category: { type: 'string', enum: ['daily', 'weekly', 'monthly', 'special', 'project'] },
                    type: { type: 'string', enum: ['one_time', 'repeatable'] },
                    maxParticipants: { type: 'integer', example: 20 },
                    beePointsReward: { type: 'integer', example: 50 },
                    requiresPhoto: { type: 'boolean', example: true },
                    startDate: { type: 'string', format: 'date-time' },
                    endDate: { type: 'string', format: 'date-time' },
                    priority: { type: 'string', enum: ['low', 'medium', 'high', 'urgent'] },
                    tags: { type: 'array', items: { type: 'string' } }
                  }
                }
              }
            }
          },
          responses: {
            201: {
              description: 'Nhi·ªám v·ª• ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
              content: {
                'application/json': {
                  schema: { $ref: '#/components/schemas/Mission' }
                }
              }
            }
          }
        }
      },
      '/api/missions/{id}': {
        get: {
          summary: 'L·∫•y chi ti·∫øt nhi·ªám v·ª•',
          tags: ['üéØ Missions'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' }
            }
          ],
          responses: {
            200: {
              description: 'Chi ti·∫øt nhi·ªám v·ª•',
              content: {
                'application/json': {
                  schema: {
                    allOf: [
                      { $ref: '#/components/schemas/Mission' },
                      {
                        type: 'object',
                        properties: {
                          assignments: {
                            type: 'array',
                            items: { $ref: '#/components/schemas/MissionAssignment' }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        put: {
          summary: 'C·∫≠p nh·∫≠t nhi·ªám v·ª• (üü° ADMIN)',
          tags: ['üéØ Missions'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' }
            }
          ],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    title: { type: 'string' },
                    description: { type: 'string' },
                    maxParticipants: { type: 'integer' },
                    beePointsReward: { type: 'integer' },
                    requiresPhoto: { type: 'boolean' },
                    startDate: { type: 'string', format: 'date-time' },
                    endDate: { type: 'string', format: 'date-time' },
                    priority: { type: 'string', enum: ['low', 'medium', 'high', 'urgent'] },
                    status: { type: 'string', enum: ['active', 'paused', 'completed', 'cancelled'] },
                    tags: { type: 'array', items: { type: 'string' } }
                  }
                }
              }
            }
          },
          responses: {
            200: {
              description: 'Nhi·ªám v·ª• ƒë∆∞·ª£c c·∫≠p nh·∫≠t',
              content: {
                'application/json': {
                  schema: { $ref: '#/components/schemas/Mission' }
                }
              }
            }
          }
        },
        delete: {
          summary: 'X√≥a nhi·ªám v·ª• (üü° ADMIN)',
          tags: ['üéØ Missions'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' }
            }
          ],
          responses: {
            200: {
              description: 'Nhi·ªám v·ª• ƒë∆∞·ª£c x√≥a',
              content: {
                'application/json': {
                  schema: {
                    type: 'object',
                    properties: {
                      message: { type: 'string' }
                    }
                  }
                }
              }
            }
          }
        }
      },
      '/api/missions/{id}/assign': {
        post: {
          summary: 'Giao nhi·ªám v·ª• cho ng∆∞·ªùi d√πng (üü° ADMIN)',
          tags: ['üéØ Missions'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' }
            }
          ],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  required: ['userId'],
                  properties: {
                    userId: { type: 'integer', example: 2 }
                  }
                }
              }
            }
          },
          responses: {
            201: {
              description: 'Giao nhi·ªám v·ª• th√†nh c√¥ng',
              content: {
                'application/json': {
                  schema: { $ref: '#/components/schemas/MissionAssignment' }
                }
              }
            }
          }
        }
      },
      '/api/missions/my': {
        get: {
          summary: 'L·∫•y nhi·ªám v·ª• c·ªßa t√¥i',
          tags: ['üéØ Missions'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'query',
              name: 'status',
              schema: { type: 'string', enum: ['assigned', 'in_progress', 'completed', 'submitted', 'rejected'] },
              description: 'L·ªçc theo tr·∫°ng th√°i'
            }
          ],
          responses: {
            200: {
              description: 'Danh s√°ch nhi·ªám v·ª• c·ªßa ng∆∞·ªùi d√πng',
              content: {
                'application/json': {
                  schema: {
                    type: 'array',
                    items: {
                      type: 'object',
                      properties: {
                        assignment: { $ref: '#/components/schemas/MissionAssignment' },
                        mission: { $ref: '#/components/schemas/Mission' }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      '/api/missions/{id}/submit': {
        post: {
          summary: 'N·ªôp nhi·ªám v·ª• (c√≥ th·ªÉ k√®m h√¨nh ·∫£nh)',
          tags: ['üéØ Missions'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' }
            }
          ],
          requestBody: {
            required: true,
            content: {
              'multipart/form-data': {
                schema: {
                  type: 'object',
                  properties: {
                    photo: { type: 'string', format: 'binary', description: 'H√¨nh ·∫£nh minh ch·ª©ng (n·∫øu c·∫ßn)' },
                    submissionNote: { type: 'string', description: 'Ghi ch√∫ khi n·ªôp b√†i' }
                  }
                }
              }
            }
          },
          responses: {
            200: {
              description: 'N·ªôp nhi·ªám v·ª• th√†nh c√¥ng',
              content: {
                'application/json': {
                  schema: {
                    type: 'object',
                    properties: {
                      message: { type: 'string' },
                      assignment: { $ref: '#/components/schemas/MissionAssignment' }
                    }
                  }
                }
              }
            }
          }
        }
      },
      '/api/missions/assignments/{id}/review': {
        post: {
          summary: 'Duy·ªát nhi·ªám v·ª• (üü° ADMIN)',
          tags: ['üéØ Missions'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' }
            }
          ],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  required: ['status'],
                  properties: {
                    status: { type: 'string', enum: ['completed', 'rejected'] },
                    reviewNote: { type: 'string', example: 'Ho√†n th√†nh t·ªët' },
                    pointsAwarded: { type: 'integer', example: 50 }
                  }
                }
              }
            }
          },
          responses: {
            200: {
              description: 'Duy·ªát nhi·ªám v·ª• th√†nh c√¥ng',
              content: {
                'application/json': {
                  schema: {
                    type: 'object',
                    properties: {
                      message: { type: 'string' },
                      assignment: { $ref: '#/components/schemas/MissionAssignment' }
                    }
                  }
                }
              }
            }
          }
        }
      },
      '/api/permissions': {
        get: {
          summary: 'L·∫•y danh s√°ch t·∫•t c·∫£ permissions c√≥ s·∫µn trong h·ªá th·ªëng',
          tags: ['üîë Permission Management'],
          security: [{ bearerAuth: [] }],
          responses: {
            200: {
              description: 'Danh s√°ch permissions ƒë∆∞·ª£c nh√≥m theo category',
              content: {
                'application/json': {
                  schema: {
                    type: 'object',
                    properties: {
                      total: { type: 'integer', example: 57 },
                      permissions: {
                        type: 'array',
                        items: { type: 'string' },
                        example: ['member:view', 'member:create', 'achievement:view']
                      },
                      groupedPermissions: {
                        type: 'object',
                        example: {
                          member: ['member:view', 'member:create'],
                          achievement: ['achievement:view', 'achievement:create']
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      '/api/roles/{id}/permissions': {
        get: {
          summary: 'L·∫•y permissions c·ªßa role c·ª• th·ªÉ',
          tags: ['üîë Permission Management'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' },
              description: 'ID c·ªßa role'
            }
          ],
          responses: {
            200: {
              description: 'Th√¥ng tin permissions c·ªßa role',
              content: {
                'application/json': {
                  schema: {
                    type: 'object',
                    properties: {
                      role: {
                        type: 'object',
                        properties: {
                          id: { type: 'integer' },
                          name: { type: 'string' },
                          displayName: { type: 'string' },
                          permissions: {
                            type: 'array',
                            items: { type: 'string' }
                          }
                        }
                      },
                      availablePermissions: {
                        type: 'array',
                        items: { type: 'string' }
                      },
                      permissionsCount: { type: 'integer' }
                    }
                  }
                }
              }
            }
          }
        },
        put: {
          summary: 'C·∫≠p nh·∫≠t permissions cho role',
          tags: ['üîë Permission Management'],
          security: [{ bearerAuth: [] }],
          parameters: [
            {
              in: 'path',
              name: 'id',
              required: true,
              schema: { type: 'integer' },
              description: 'ID c·ªßa role'
            }
          ],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  required: ['permissions'],
                  properties: {
                    permissions: {
                      type: 'array',
                      items: { type: 'string' },
                      example: ['member:view', 'member:create', 'achievement:view']
                    }
                  }
                }
              }
            }
          },
          responses: {
            200: {
              description: 'C·∫≠p nh·∫≠t permissions th√†nh c√¥ng',
              content: {
                'application/json': {
                  schema: {
                    type: 'object',
                    properties: {
                      message: { type: 'string' },
                      role: { $ref: '#/components/schemas/Role' },
                      changedPermissions: {
                        type: 'object',
                        properties: {
                          added: {
                            type: 'array',
                            items: { type: 'string' }
                          },
                          removed: {
                            type: 'array',
                            items: { type: 'string' }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      '/api/auth/profile': {
        put: {
          summary: 'C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n (ƒë√£ c·∫≠p nh·∫≠t h·ªó tr·ª£ t·∫•t c·∫£ tr∆∞·ªùng)',
          tags: ['üîê Authentication'],
          security: [{ bearerAuth: [] }],
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  required: ['fullName', 'email'],
                  properties: {
                    fullName: { type: 'string', example: 'Nguy·ªÖn VƒÉn A' },
                    email: { type: 'string', example: 'user@example.com' },
                    bio: { type: 'string', example: 'M√¥ t·∫£ v·ªÅ b·∫£n th√¢n' },
                    phone: { type: 'string', example: '0987654321' },
                    facebookUrl: { type: 'string', example: 'https://facebook.com/username' },
                    instagramUrl: { type: 'string', example: 'https://instagram.com/username' },
                    tiktokUrl: { type: 'string', example: 'https://tiktok.com/@username' },
                    youtubeUrl: { type: 'string', example: 'https://youtube.com/channel/xxx' },
                    linkedinUrl: { type: 'string', example: 'https://linkedin.com/in/username' },
                    githubUrl: { type: 'string', example: 'https://github.com/username' }
                  }
                }
              }
            }
          },
          responses: {
            200: {
              description: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng',
              content: {
                'application/json': {
                  schema: {
                    type: 'object',
                    properties: {
                      message: { type: 'string' },
                      user: { $ref: '#/components/schemas/User' }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  apis: [],
};

export function setupSwagger(app: Express) {
  // Dynamic server URL detection
  app.use('/api-docs', (req, res, next) => {
    const protocol = req.headers['x-forwarded-proto'] || req.protocol;
    const host = req.headers['x-forwarded-host'] || req.headers.host;
    const serverUrl = `${protocol}://${host}`;
    
    // Update server URL dynamically
    options.definition.servers = [
      {
        url: serverUrl,
        description: 'Current Server',
      },
    ];
    next();
  });

  const specs = swaggerJsdoc(options);

  // Serve Swagger UI
  app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs, {
    explorer: true,
    customSiteTitle: 'CLB S√°ng T·∫°o - API Documentation',
    customCss: `
      .swagger-ui .topbar { display: none; }
      .swagger-ui .info { margin: 20px 0; }
      .swagger-ui .info .title { color: #1f2937; font-size: 24px; }
      .swagger-ui .info .description { font-size: 14px; line-height: 1.6; white-space: pre-line; }
      .swagger-ui .scheme-container { background: #f8fafc; padding: 15px; border-radius: 8px; margin: 20px 0; }
      .swagger-ui .opblock.opblock-post { border-color: #059669; background: rgba(5, 150, 105, 0.1); }
      .swagger-ui .opblock.opblock-get { border-color: #0284c7; background: rgba(2, 132, 199, 0.1); }
      .swagger-ui .opblock.opblock-put { border-color: #f59e0b; background: rgba(245, 158, 11, 0.1); }
      .swagger-ui .opblock.opblock-delete { border-color: #dc2626; background: rgba(220, 38, 38, 0.1); }
      .swagger-ui .opblock-tag { font-size: 16px; font-weight: 600; margin-bottom: 10px; }
    `,
    swaggerOptions: {
      persistAuthorization: true,
      tryItOutEnabled: true,
      filter: true,
      displayRequestDuration: true,
      docExpansion: 'list',
      tagsSorter: (a: string, b: string) => {
        const order = [
          'üü¢ Public',
          'üîê Authentication', 
          'üë• Users',
          'üîí Roles',
          'üéì Members',
          'üè¢ Departments',
          'üëë Positions',
          'üìã Divisions',
          'üìÖ Academic Years',
          'üèÜ Achievements',
          'üçØ BeePoints',
          'üõí Shop',
          'üéØ Missions',
          'üìä Statistics',
          'üîë API Keys',
          'üåê External API'
        ];
        return order.indexOf(a) - order.indexOf(b);
      },
    },
  }));

  // JSON spec
  app.get('/api-docs.json', (req, res) => {
    const protocol = req.headers['x-forwarded-proto'] || req.protocol;
    const host = req.headers['x-forwarded-host'] || req.headers.host;
    const serverUrl = `${protocol}://${host}`;
    
    options.definition.servers = [{ url: serverUrl, description: 'Current Server' }];
    const specs = swaggerJsdoc(options);
    
    res.setHeader('Content-Type', 'application/json');
    res.send(specs);
  });

  // Postman collection
  app.get('/postman-collection.json', (req, res) => {
    const protocol = req.headers['x-forwarded-proto'] || req.protocol;
    const host = req.headers['x-forwarded-host'] || req.headers.host;
    const serverUrl = `${protocol}://${host}`;
    
    const collection = {
      info: {
        name: 'CLB S√°ng T·∫°o API',
        description: 'Complete API collection',
        schema: 'https://schema.getpostman.com/json/collection/v2.1.0/collection.json',
      },
      variable: [
        { key: 'baseUrl', value: serverUrl },
        { key: 'authToken', value: '' },
        { key: 'apiKey', value: '' },
      ],
      auth: {
        type: 'bearer',
        bearer: [{ key: 'token', value: '{{authToken}}', type: 'string' }],
      },
      item: [
        {
          name: 'üîê Authentication',
          item: [
            {
              name: 'Login',
              event: [
                {
                  listen: 'test',
                  script: {
                    exec: [
                      'if (pm.response.to.have.status(200)) {',
                      '    const response = pm.response.json();',
                      '    pm.collectionVariables.set("authToken", response.token);',
                      '}'
                    ]
                  }
                }
              ],
              request: {
                method: 'POST',
                header: [{ key: 'Content-Type', value: 'application/json' }],
                body: {
                  mode: 'raw',
                  raw: JSON.stringify({ username: 'admin', password: 'password123' })
                },
                url: '{{baseUrl}}/api/auth/login'
              }
            }
          ]
        }
      ]
    };

    res.setHeader('Content-Type', 'application/json');
    res.setHeader('Content-Disposition', 'attachment; filename="CLB-SangTao-API.postman_collection.json"');
    res.send(collection);
  });

  app.get('/docs', (req, res) => res.redirect('/api-docs'));
}