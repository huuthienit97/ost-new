import swaggerJsdoc from 'swagger-jsdoc';
import swaggerUi from 'swagger-ui-express';
import type { Express } from 'express';

const options = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'CLB S√°ng T·∫°o - API Documentation',
      version: '2.1.0',
      description: `
# H·ªá th·ªëng qu·∫£n l√Ω c√¢u l·∫°c b·ªô s√°ng t·∫°o

## Ph√¢n quy·ªÅn r√µ r√†ng:
- üü¢ **PUBLIC** - Kh√¥ng c·∫ßn x√°c th·ª±c
- üîµ **USER** - C·∫ßn ƒëƒÉng nh·∫≠p
- üü° **ADMIN** - C·∫ßn quy·ªÅn admin ƒë·ªÉ t·∫°o/s·ª≠a/x√≥a
- üî¥ **SUPER_ADMIN** - C·∫ßn quy·ªÅn super admin ƒë·ªÉ qu·∫£n l√Ω positions, divisions, academic years

## C√°c nh√≥m API:
1. Authentication - X√°c th·ª±c
2. Users - Qu·∫£n l√Ω ng∆∞·ªùi d√πng (üü° ADMIN)
3. Members - Qu·∫£n l√Ω th√†nh vi√™n CLB
4. Departments - Qu·∫£n l√Ω ban
5. Positions - Qu·∫£n l√Ω ch·ª©c v·ª• (üî¥ SUPER_ADMIN)
6. Divisions - Qu·∫£n l√Ω ban ph·ª• tr√°ch (üî¥ SUPER_ADMIN)
7. Academic Years - Qu·∫£n l√Ω kh√≥a h·ªçc (üî¥ SUPER_ADMIN)
8. Achievements - H·ªá th·ªëng th√†nh t√≠ch
9. BeePoints - H·ªá th·ªëng ƒëi·ªÉm th∆∞·ªüng
10. Statistics - Th·ªëng k√™
11. API Keys - Qu·∫£n l√Ω API keys (üü° ADMIN)
12. External API - API cho ·ª©ng d·ª•ng th·ª© 3
      `,
      contact: {
        name: 'CLB S√°ng T·∫°o',
        email: 'admin@clbsangtao.com'
      },
    },
    servers: [
      {
        url: 'http://localhost:5000',
        description: 'Development Server',
      },
    ],
    components: {
      securitySchemes: {
        bearerAuth: {
          type: 'http',
          scheme: 'bearer',
          bearerFormat: 'JWT',
          description: 'JWT token t·ª´ /api/auth/login',
        },
        ApiKeyAuth: {
          type: 'apiKey',
          in: 'header',
          name: 'x-api-key',
          description: 'API key cho ·ª©ng d·ª•ng th·ª© 3',
        },
      },
      responses: {
        Unauthorized: {
          description: 'Unauthorized',
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/Error'
              }
            }
          }
        },
        Forbidden: {
          description: 'Forbidden',
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/Error'
              }
            }
          }
        },
        BadRequest: {
          description: 'Bad Request',
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/Error'
              }
            }
          }
        },
        NotFound: {
          description: 'Not Found',
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/Error'
              }
            }
          }
        },
      },
      schemas: {
        Error: {
          type: 'object',
          properties: {
            message: { type: 'string', example: 'Error message' },
            errors: { type: 'array', items: { type: 'object' } },
          },
        },
        User: {
          type: 'object',
          properties: {
            id: { type: 'integer', example: 1 },
            username: { type: 'string', example: 'admin' },
            email: { type: 'string', example: 'admin@example.com' },
            fullName: { type: 'string', example: 'Nguy·ªÖn VƒÉn A' },
            roleId: { type: 'integer', example: 1 },
            isActive: { type: 'boolean', example: true },
            mustChangePassword: { type: 'boolean', example: false },
            avatarUrl: { type: 'string', nullable: true },
            bio: { type: 'string', nullable: true },
            phone: { type: 'string', nullable: true },
            createdAt: { type: 'string', format: 'date-time' },
            updatedAt: { type: 'string', format: 'date-time' },
            position: { type: 'string', nullable: true, example: 'Ch·ªß nhi·ªám' },
            positionLevel: { type: 'integer', nullable: true, example: 100 },
            departmentName: { type: 'string', nullable: true, example: 'Ban Thi·∫øt k·∫ø' },
            divisionName: { type: 'string', nullable: true, example: 'Ban Truy·ªÅn th√¥ng' },
            memberType: { type: 'string', nullable: true, example: 'active' },
            academicYear: { type: 'string', nullable: true, example: 'Kh√≥a 2024-2025' },
          },
        },
        Member: {
          type: 'object',
          properties: {
            id: { type: 'integer', example: 1 },
            fullName: { type: 'string', example: 'Tr·∫ßn Th·ªã B' },
            studentId: { type: 'string', example: 'HS001' },
            email: { type: 'string', example: 'student@example.com' },
            phone: { type: 'string', example: '0987654321' },
            class: { type: 'string', example: '12A1' },
            departmentId: { type: 'integer', example: 1 },
            positionId: { type: 'integer', example: 1 },
            divisionId: { type: 'integer', nullable: true },
            academicYearId: { type: 'integer', example: 1 },
            memberType: { type: 'string', enum: ['active', 'alumni'], example: 'active' },
            joinDate: { type: 'string', format: 'date', example: '2024-11-01' },
            notes: { type: 'string', nullable: true },
            userId: { type: 'integer', nullable: true },
            isActive: { type: 'boolean', example: true },
            department: {
              type: 'object',
              nullable: true,
              properties: {
                id: { type: 'integer' },
                name: { type: 'string' },
                icon: { type: 'string' },
                color: { type: 'string' }
              }
            },
            position: {
              type: 'object',
              nullable: true,
              properties: {
                id: { type: 'integer' },
                name: { type: 'string' },
                displayName: { type: 'string' },
                level: { type: 'integer' }
              }
            },
            user: {
              type: 'object',
              nullable: true,
              properties: {
                id: { type: 'integer' },
                username: { type: 'string' },
                fullName: { type: 'string' },
                email: { type: 'string' }
              }
            }
          },
        },
        Department: {
          type: 'object',
          properties: {
            id: { type: 'integer', example: 1 },
            name: { type: 'string', example: 'Ban Thi·∫øt K·∫ø' },
            icon: { type: 'string', example: 'palette' },
            color: { type: 'string', example: '#3B82F6' },
          },
        },
        Position: {
          type: 'object',
          properties: {
            id: { type: 'integer', example: 1 },
            name: { type: 'string', example: 'president' },
            displayName: { type: 'string', example: 'Ch·ªß nhi·ªám' },
            level: { type: 'integer', example: 100 },
            description: { type: 'string', nullable: true },
            color: { type: 'string', example: '#EF4444' },
            isActive: { type: 'boolean', example: true },
          },
        },
        Division: {
          type: 'object',
          properties: {
            id: { type: 'integer', example: 1 },
            name: { type: 'string', example: 'Ban Truy·ªÅn th√¥ng' },
            description: { type: 'string', nullable: true },
            color: { type: 'string', example: '#10B981' },
            icon: { type: 'string', example: 'Users' },
            isActive: { type: 'boolean', example: true },
          },
        },
        AcademicYear: {
          type: 'object',
          properties: {
            id: { type: 'integer', example: 1 },
            name: { type: 'string', example: 'Kh√≥a 2024-2025' },
            startDate: { type: 'string', format: 'date-time', example: '2024-11-01T00:00:00.000Z' },
            endDate: { type: 'string', format: 'date-time', example: '2025-11-01T00:00:00.000Z' },
            isActive: { type: 'boolean', example: true },
            description: { type: 'string', nullable: true },
          },
        },
        Achievement: {
          type: 'object',
          properties: {
            id: { type: 'integer', example: 1 },
            title: { type: 'string', example: 'Th√†nh vi√™n xu·∫•t s·∫Øc' },
            description: { type: 'string', example: 'D√†nh cho th√†nh vi√™n c√≥ ƒë√≥ng g√≥p t√≠ch c·ª±c' },
            category: { type: 'string', enum: ['academic', 'creative', 'leadership', 'participation', 'special'] },
            level: { type: 'string', enum: ['bronze', 'silver', 'gold', 'special'] },
            badgeIcon: { type: 'string', example: 'Trophy' },
            badgeColor: { type: 'string', example: '#FFD700' },
            pointsReward: { type: 'integer', example: 50 },
          },
        },
        BeePoints: {
          type: 'object',
          properties: {
            id: { type: 'integer', example: 1 },
            userId: { type: 'integer', example: 1 },
            currentPoints: { type: 'integer', example: 150 },
            totalEarned: { type: 'integer', example: 200 },
            totalSpent: { type: 'integer', example: 50 },
            updatedAt: { type: 'string', format: 'date-time' },
          },
        },
        ApiKey: {
          type: 'object',
          properties: {
            id: { type: 'integer', example: 1 },
            name: { type: 'string', example: 'Mobile App API' },
            permissions: { type: 'array', items: { type: 'string' }, example: ['members:view', 'stats:view'] },
            isActive: { type: 'boolean', example: true },
            createdAt: { type: 'string', format: 'date-time' },
            lastUsed: { type: 'string', format: 'date-time', nullable: true },
          },
        },
        Stats: {
          type: 'object',
          properties: {
            totalMembers: { type: 'integer', example: 25 },
            activeMembers: { type: 'integer', example: 20 },
            alumniMembers: { type: 'integer', example: 5 },
            totalDepartments: { type: 'integer', example: 4 },
          },
        },
      },
    },
    tags: [
      { name: 'üü¢ Public', description: 'API c√¥ng khai - kh√¥ng c·∫ßn x√°c th·ª±c' },
      { name: 'üîê Authentication', description: 'X√°c th·ª±c v√† ƒëƒÉng nh·∫≠p' },
      { name: 'üë• Users', description: 'Qu·∫£n l√Ω ng∆∞·ªùi d√πng h·ªá th·ªëng (üü° ADMIN required)' },
      { name: 'üéì Members', description: 'Qu·∫£n l√Ω th√†nh vi√™n CLB' },
      { name: 'üè¢ Departments', description: 'Qu·∫£n l√Ω ban trong CLB' },
      { name: 'üëë Positions', description: 'Qu·∫£n l√Ω ch·ª©c v·ª• chu·∫©n h√≥a (üî¥ SUPER_ADMIN required)' },
      { name: 'üìã Divisions', description: 'Qu·∫£n l√Ω ban ph·ª• tr√°ch (üî¥ SUPER_ADMIN required)' },
      { name: 'üìÖ Academic Years', description: 'Qu·∫£n l√Ω kh√≥a h·ªçc (üî¥ SUPER_ADMIN required)' },
      { name: 'üèÜ Achievements', description: 'H·ªá th·ªëng th√†nh t√≠ch' },
      { name: 'üçØ BeePoints', description: 'H·ªá th·ªëng ƒëi·ªÉm th∆∞·ªüng' },
      { name: 'üìä Statistics', description: 'Th·ªëng k√™ t·ªïng quan' },
      { name: 'üîë API Keys', description: 'Qu·∫£n l√Ω API keys (üü° ADMIN required)' },
      { name: 'üåê External API', description: 'API cho ·ª©ng d·ª•ng th·ª© 3 (c·∫ßn API key)' },
    ],
  },
  apis: ['./server/routes.ts', './server/swagger-complete.ts'],
};

// Define complete API paths with proper documentation
const apiPaths = {
  '/api/public/users': {
    get: {
      summary: 'L·∫•y danh s√°ch ng∆∞·ªùi d√πng v·ªõi th√¥ng tin ch·ª©c v·ª• v√† ban',
      tags: ['üü¢ Public'],
      responses: {
        200: {
          description: 'Danh s√°ch ng∆∞·ªùi d√πng v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin',
          content: {
            'application/json': {
              schema: {
                type: 'array',
                items: { $ref: '#/components/schemas/User' }
              }
            }
          }
        },
        500: { $ref: '#/components/responses/BadRequest' }
      }
    }
  },
  '/api/auth/login': {
    post: {
      summary: 'ƒêƒÉng nh·∫≠p h·ªá th·ªëng',
      tags: ['üîê Authentication'],
      requestBody: {
        required: true,
        content: {
          'application/json': {
            schema: {
              type: 'object',
              required: ['username', 'password'],
              properties: {
                username: { type: 'string', example: 'admin' },
                password: { type: 'string', example: 'password123' }
              }
            }
          }
        }
      },
      responses: {
        200: {
          description: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  token: { type: 'string' },
                  user: { $ref: '#/components/schemas/User' }
                }
              }
            }
          }
        },
        401: { $ref: '#/components/responses/Unauthorized' }
      }
    }
  },
  '/api/auth/me': {
    get: {
      summary: 'L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i',
      tags: ['üîê Authentication'],
      security: [{ bearerAuth: [] }],
      responses: {
        200: {
          description: 'Th√¥ng tin ng∆∞·ªùi d√πng',
          content: {
            'application/json': {
              schema: { $ref: '#/components/schemas/User' }
            }
          }
        },
        401: { $ref: '#/components/responses/Unauthorized' }
      }
    }
  },
  '/api/positions': {
    get: {
      summary: 'L·∫•y danh s√°ch ch·ª©c v·ª•',
      tags: ['üëë Positions'],
      security: [{ bearerAuth: [] }],
      responses: {
        200: {
          description: 'Danh s√°ch ch·ª©c v·ª•',
          content: {
            'application/json': {
              schema: {
                type: 'array',
                items: { $ref: '#/components/schemas/Position' }
              }
            }
          }
        }
      }
    },
    post: {
      summary: 'T·∫°o ch·ª©c v·ª• m·ªõi (üî¥ SUPER_ADMIN)',
      tags: ['üëë Positions'],
      security: [{ bearerAuth: [] }],
      requestBody: {
        required: true,
        content: {
          'application/json': {
            schema: {
              type: 'object',
              required: ['name', 'displayName', 'level'],
              properties: {
                name: { type: 'string', example: 'vice-president' },
                displayName: { type: 'string', example: 'Ph√≥ ch·ªß nhi·ªám' },
                level: { type: 'integer', example: 90 },
                description: { type: 'string', example: 'Ph·ª• tr√°ch h·ªó tr·ª£ ch·ªß nhi·ªám' },
                color: { type: 'string', example: '#10B981' }
              }
            }
          }
        }
      },
      responses: {
        201: {
          description: 'Ch·ª©c v·ª• ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
          content: {
            'application/json': {
              schema: { $ref: '#/components/schemas/Position' }
            }
          }
        },
        403: { $ref: '#/components/responses/Forbidden' }
      }
    }
  },
  '/api/positions/{id}': {
    put: {
      summary: 'C·∫≠p nh·∫≠t ch·ª©c v·ª• (üî¥ SUPER_ADMIN)',
      tags: ['üëë Positions'],
      security: [{ bearerAuth: [] }],
      parameters: [
        {
          in: 'path',
          name: 'id',
          required: true,
          schema: { type: 'integer' },
          description: 'ID ch·ª©c v·ª•'
        }
      ],
      requestBody: {
        required: true,
        content: {
          'application/json': {
            schema: {
              type: 'object',
              properties: {
                displayName: { type: 'string' },
                level: { type: 'integer' },
                description: { type: 'string' },
                color: { type: 'string' }
              }
            }
          }
        }
      },
      responses: {
        200: {
          description: 'Ch·ª©c v·ª• ƒë∆∞·ª£c c·∫≠p nh·∫≠t',
          content: {
            'application/json': {
              schema: { $ref: '#/components/schemas/Position' }
            }
          }
        },
        404: { $ref: '#/components/responses/NotFound' }
      }
    },
    delete: {
      summary: 'X√≥a ch·ª©c v·ª• (üî¥ SUPER_ADMIN)',
      tags: ['üëë Positions'],
      security: [{ bearerAuth: [] }],
      parameters: [
        {
          in: 'path',
          name: 'id',
          required: true,
          schema: { type: 'integer' },
          description: 'ID ch·ª©c v·ª•'
        }
      ],
      responses: {
        200: {
          description: 'Ch·ª©c v·ª• ƒë∆∞·ª£c x√≥a',
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  message: { type: 'string', example: 'ƒê√£ x√≥a ch·ª©c v·ª•' }
                }
              }
            }
          }
        },
        400: {
          description: 'Kh√¥ng th·ªÉ x√≥a ch·ª©c v·ª• c√≥ th√†nh vi√™n',
          content: {
            'application/json': {
              schema: { $ref: '#/components/schemas/Error' }
            }
          }
        }
      }
    }
  },
  '/api/academic-years': {
    get: {
      summary: 'L·∫•y danh s√°ch kh√≥a h·ªçc',
      tags: ['üìÖ Academic Years'],
      security: [{ bearerAuth: [] }],
      responses: {
        200: {
          description: 'Danh s√°ch kh√≥a h·ªçc',
          content: {
            'application/json': {
              schema: {
                type: 'array',
                items: { $ref: '#/components/schemas/AcademicYear' }
              }
            }
          }
        }
      }
    },
    post: {
      summary: 'T·∫°o kh√≥a h·ªçc m·ªõi (üî¥ SUPER_ADMIN)',
      tags: ['üìÖ Academic Years'],
      security: [{ bearerAuth: [] }],
      requestBody: {
        required: true,
        content: {
          'application/json': {
            schema: {
              type: 'object',
              required: ['name', 'startDate', 'endDate'],
              properties: {
                name: { type: 'string', example: 'Kh√≥a 2025-2026' },
                startDate: { type: 'string', format: 'date', example: '2025-11-01' },
                endDate: { type: 'string', format: 'date', example: '2026-11-01' },
                description: { type: 'string', example: 'Kh√≥a h·ªçc nƒÉm 2025-2026' },
                isActive: { type: 'boolean', example: false }
              }
            }
          }
        }
      },
      responses: {
        201: {
          description: 'Kh√≥a h·ªçc ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
          content: {
            'application/json': {
              schema: { $ref: '#/components/schemas/AcademicYear' }
            }
          }
        },
        403: { $ref: '#/components/responses/Forbidden' }
      }
    }
  },
  '/api/academic-years/{id}': {
    put: {
      summary: 'C·∫≠p nh·∫≠t kh√≥a h·ªçc (üî¥ SUPER_ADMIN)',
      tags: ['üìÖ Academic Years'],
      security: [{ bearerAuth: [] }],
      parameters: [
        {
          in: 'path',
          name: 'id',
          required: true,
          schema: { type: 'integer' },
          description: 'ID kh√≥a h·ªçc'
        }
      ],
      requestBody: {
        required: true,
        content: {
          'application/json': {
            schema: {
              type: 'object',
              properties: {
                name: { type: 'string' },
                description: { type: 'string' },
                isActive: { type: 'boolean' }
              }
            }
          }
        }
      },
      responses: {
        200: {
          description: 'Kh√≥a h·ªçc ƒë∆∞·ª£c c·∫≠p nh·∫≠t',
          content: {
            'application/json': {
              schema: { $ref: '#/components/schemas/AcademicYear' }
            }
          }
        },
        404: { $ref: '#/components/responses/NotFound' }
      }
    },
    delete: {
      summary: 'X√≥a kh√≥a h·ªçc (üî¥ SUPER_ADMIN)',
      tags: ['üìÖ Academic Years'],
      security: [{ bearerAuth: [] }],
      parameters: [
        {
          in: 'path',
          name: 'id',
          required: true,
          schema: { type: 'integer' },
          description: 'ID kh√≥a h·ªçc'
        }
      ],
      responses: {
        200: {
          description: 'Kh√≥a h·ªçc ƒë∆∞·ª£c x√≥a',
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  message: { type: 'string', example: 'ƒê√£ x√≥a kh√≥a h·ªçc' }
                }
              }
            }
          }
        },
        400: {
          description: 'Kh√¥ng th·ªÉ x√≥a kh√≥a h·ªçc c√≥ th√†nh vi√™n',
          content: {
            'application/json': {
              schema: { $ref: '#/components/schemas/Error' }
            }
          }
        }
      }
    }
  },
  '/api/members': {
    get: {
      summary: 'L·∫•y danh s√°ch th√†nh vi√™n',
      tags: ['üéì Members'],
      security: [{ bearerAuth: [] }],
      parameters: [
        {
          in: 'query',
          name: 'search',
          schema: { type: 'string' },
          description: 'T√¨m ki·∫øm theo t√™n, m√£ h·ªçc sinh, l·ªõp'
        },
        {
          in: 'query',
          name: 'type',
          schema: { type: 'string', enum: ['active', 'alumni'] },
          description: 'Lo·∫°i th√†nh vi√™n'
        },
        {
          in: 'query',
          name: 'department',
          schema: { type: 'integer' },
          description: 'ID ph√≤ng ban'
        },
        {
          in: 'query',
          name: 'position',
          schema: { type: 'integer' },
          description: 'ID ch·ª©c v·ª•'
        }
      ],
      responses: {
        200: {
          description: 'Danh s√°ch th√†nh vi√™n v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß',
          content: {
            'application/json': {
              schema: {
                type: 'array',
                items: { $ref: '#/components/schemas/Member' }
              }
            }
          }
        }
      }
    },
    post: {
      summary: 'T·∫°o th√†nh vi√™n m·ªõi (üü° ADMIN)',
      tags: ['üéì Members'],
      security: [{ bearerAuth: [] }],
      requestBody: {
        required: true,
        content: {
          'application/json': {
            schema: {
              type: 'object',
              required: ['fullName', 'class', 'departmentId', 'positionId', 'academicYearId', 'memberType', 'joinDate'],
              properties: {
                fullName: { type: 'string', example: 'Nguy·ªÖn VƒÉn A' },
                studentId: { type: 'string', example: 'HS001' },
                email: { type: 'string', example: 'student@example.com' },
                phone: { type: 'string', example: '0987654321' },
                class: { type: 'string', example: '12A1' },
                departmentId: { type: 'integer', example: 1 },
                positionId: { type: 'integer', example: 1 },
                divisionId: { type: 'integer', example: 1 },
                academicYearId: { type: 'integer', example: 1 },
                memberType: { type: 'string', enum: ['active', 'alumni'], example: 'active' },
                joinDate: { type: 'string', format: 'date', example: '2024-11-01' },
                notes: { type: 'string', example: 'Ghi ch√∫ th√™m' }
              }
            }
          }
        }
      },
      responses: {
        201: {
          description: 'Th√†nh vi√™n ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
          content: {
            'application/json': {
              schema: { $ref: '#/components/schemas/Member' }
            }
          }
        },
        403: { $ref: '#/components/responses/Forbidden' }
      }
    }
  }
};

// Merge paths into options
options.definition.paths = apiPaths;

const specs = swaggerJsdoc(options);

export function setupCompleteSwagger(app: Express) {
  // Serve swagger docs with enhanced UI
  app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs, {
    explorer: true,
    customSiteTitle: 'CLB S√°ng T·∫°o - API Documentation (Complete)',
    customCss: `
      .swagger-ui .topbar { display: none; }
      .swagger-ui .info { margin: 20px 0; }
      .swagger-ui .info .title { color: #1f2937; font-size: 24px; }
      .swagger-ui .info .description { font-size: 14px; line-height: 1.6; }
      .swagger-ui .scheme-container { background: #f8fafc; padding: 15px; border-radius: 8px; margin: 20px 0; }
      .swagger-ui .opblock.opblock-post { border-color: #059669; background: rgba(5, 150, 105, 0.1); }
      .swagger-ui .opblock.opblock-get { border-color: #0284c7; background: rgba(2, 132, 199, 0.1); }
      .swagger-ui .opblock.opblock-put { border-color: #f59e0b; background: rgba(245, 158, 11, 0.1); }
      .swagger-ui .opblock.opblock-delete { border-color: #dc2626; background: rgba(220, 38, 38, 0.1); }
      .swagger-ui .opblock-tag { font-size: 16px; font-weight: 600; }
    `,
    swaggerOptions: {
      persistAuthorization: true,
      tryItOutEnabled: true,
      filter: true,
      displayRequestDuration: true,
      docExpansion: 'list',
      tagsSorter: 'alpha',
    },
  }));

  // JSON spec
  app.get('/api-docs.json', (req, res) => {
    res.setHeader('Content-Type', 'application/json');
    res.send(specs);
  });
}