import swaggerJsdoc from 'swagger-jsdoc';
import swaggerUi from 'swagger-ui-express';
import type { Express } from 'express';

export function setupSwagger(app: Express) {
  // Dynamic Swagger configuration that detects production URL
  app.get('/api-docs', (req, res) => {
    const protocol = req.headers['x-forwarded-proto'] || req.protocol;
    const host = req.headers['x-forwarded-host'] || req.headers.host;
    const serverUrl = `${protocol}://${host}`;
    
    const options = {
      definition: {
        openapi: '3.0.0',
        info: {
          title: 'CLB S√°ng T·∫°o - API Documentation',
          version: '2.1.0',
          description: `
# H·ªá th·ªëng qu·∫£n l√Ω c√¢u l·∫°c b·ªô s√°ng t·∫°o

## Ph√¢n quy·ªÅn:
- üü¢ **PUBLIC** - Kh√¥ng c·∫ßn x√°c th·ª±c
- üîµ **USER** - C·∫ßn ƒëƒÉng nh·∫≠p
- üü° **ADMIN** - C·∫ßn quy·ªÅn admin
- üî¥ **SUPER_ADMIN** - C·∫ßn quy·ªÅn super admin

## H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:
1. ƒêƒÉng nh·∫≠p t·∫°i /api/auth/login ƒë·ªÉ l·∫•y JWT token
2. Click "Authorize" v√† nh·∫≠p: Bearer <your-token>
3. Test c√°c API theo nh√≥m ch·ª©c nƒÉng
          `,
          contact: {
            name: 'CLB S√°ng T·∫°o',
            email: 'admin@clbsangtao.com'
          },
        },
        servers: [
          {
            url: serverUrl,
            description: 'Current Server'
          }
        ],
        components: {
          securitySchemes: {
            bearerAuth: {
              type: 'http',
              scheme: 'bearer',
              bearerFormat: 'JWT',
              description: 'JWT token t·ª´ /api/auth/login',
            },
            ApiKeyAuth: {
              type: 'apiKey',
              in: 'header',
              name: 'x-api-key',
              description: 'API key cho ·ª©ng d·ª•ng th·ª© 3',
            },
          },
          responses: {
            Unauthorized: {
              description: 'Unauthorized',
              content: {
                'application/json': {
                  schema: { $ref: '#/components/schemas/Error' }
                }
              }
            },
            Forbidden: {
              description: 'Forbidden',
              content: {
                'application/json': {
                  schema: { $ref: '#/components/schemas/Error' }
                }
              }
            },
            BadRequest: {
              description: 'Bad Request',
              content: {
                'application/json': {
                  schema: { $ref: '#/components/schemas/Error' }
                }
              }
            },
            NotFound: {
              description: 'Not Found',
              content: {
                'application/json': {
                  schema: { $ref: '#/components/schemas/Error' }
                }
              }
            },
          },
          schemas: {
            Error: {
              type: 'object',
              properties: {
                message: { type: 'string', example: 'Error message' },
                errors: { type: 'array', items: { type: 'object' } },
              },
            },
            LoginRequest: {
              type: 'object',
              required: ['username', 'password'],
              properties: {
                username: { 
                  type: 'string', 
                  example: 'admin',
                  description: 'T√™n ƒëƒÉng nh·∫≠p'
                },
                password: { 
                  type: 'string', 
                  example: 'password123',
                  description: 'M·∫≠t kh·∫©u'
                },
              },
            },
            LoginResponse: {
              type: 'object',
              properties: {
                token: { 
                  type: 'string', 
                  example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',
                  description: 'JWT token ƒë·ªÉ x√°c th·ª±c'
                },
                user: { $ref: '#/components/schemas/User' }
              },
            },
            User: {
              type: 'object',
              properties: {
                id: { type: 'integer', example: 1 },
                username: { type: 'string', example: 'admin' },
                email: { type: 'string', example: 'admin@example.com' },
                fullName: { type: 'string', example: 'Nguy·ªÖn VƒÉn A' },
                roleId: { type: 'integer', example: 1 },
                isActive: { type: 'boolean', example: true },
                position: { type: 'string', nullable: true, example: 'Ch·ªß nhi·ªám' },
                departmentName: { type: 'string', nullable: true, example: 'Ban Thi·∫øt k·∫ø' },
                divisionName: { type: 'string', nullable: true, example: 'Ban Truy·ªÅn th√¥ng' },
                memberType: { type: 'string', nullable: true, example: 'active' },
                academicYear: { type: 'string', nullable: true, example: 'Kh√≥a 2024-2025' },
              },
            },
            Member: {
              type: 'object',
              properties: {
                id: { type: 'integer', example: 1 },
                fullName: { type: 'string', example: 'Tr·∫ßn Th·ªã B' },
                studentId: { type: 'string', example: 'HS001' },
                email: { type: 'string', example: 'student@example.com' },
                phone: { type: 'string', example: '0987654321' },
                class: { type: 'string', example: '12A1' },
                departmentId: { type: 'integer', example: 1 },
                positionId: { type: 'integer', example: 1 },
                divisionId: { type: 'integer', nullable: true },
                academicYearId: { type: 'integer', example: 1 },
                memberType: { type: 'string', enum: ['active', 'alumni'], example: 'active' },
                joinDate: { type: 'string', format: 'date', example: '2024-11-01' },
                notes: { type: 'string', nullable: true },
                userId: { type: 'integer', nullable: true },
                isActive: { type: 'boolean', example: true },
                department: {
                  type: 'object',
                  nullable: true,
                  properties: {
                    id: { type: 'integer' },
                    name: { type: 'string' },
                    icon: { type: 'string' },
                    color: { type: 'string' }
                  }
                },
                position: {
                  type: 'object',
                  nullable: true,
                  properties: {
                    id: { type: 'integer' },
                    name: { type: 'string' },
                    displayName: { type: 'string' },
                    level: { type: 'integer' }
                  }
                },
                user: {
                  type: 'object',
                  nullable: true,
                  properties: {
                    id: { type: 'integer' },
                    username: { type: 'string' },
                    fullName: { type: 'string' },
                    email: { type: 'string' }
                  }
                }
              },
            },
            CreateMemberRequest: {
              type: 'object',
              required: ['fullName', 'class', 'departmentId', 'positionId', 'academicYearId', 'memberType', 'joinDate'],
              properties: {
                fullName: { type: 'string', example: 'Nguy·ªÖn VƒÉn A' },
                studentId: { type: 'string', example: 'HS001' },
                email: { type: 'string', example: 'student@example.com' },
                phone: { type: 'string', example: '0987654321' },
                class: { type: 'string', example: '12A1' },
                departmentId: { type: 'integer', example: 1 },
                positionId: { type: 'integer', example: 1 },
                divisionId: { type: 'integer', example: 1 },
                academicYearId: { type: 'integer', example: 1 },
                memberType: { type: 'string', enum: ['active', 'alumni'], example: 'active' },
                joinDate: { type: 'string', format: 'date', example: '2024-11-01' },
                notes: { type: 'string', example: 'Ghi ch√∫ th√™m' }
              }
            },
            Department: {
              type: 'object',
              properties: {
                id: { type: 'integer', example: 1 },
                name: { type: 'string', example: 'Ban Thi·∫øt K·∫ø' },
                icon: { type: 'string', example: 'palette' },
                color: { type: 'string', example: '#3B82F6' },
              },
            },
            Position: {
              type: 'object',
              properties: {
                id: { type: 'integer', example: 1 },
                name: { type: 'string', example: 'president' },
                displayName: { type: 'string', example: 'Ch·ªß nhi·ªám' },
                level: { type: 'integer', example: 100 },
                description: { type: 'string', nullable: true },
                color: { type: 'string', example: '#EF4444' },
                isActive: { type: 'boolean', example: true },
              },
            },
            CreatePositionRequest: {
              type: 'object',
              required: ['name', 'displayName', 'level'],
              properties: {
                name: { type: 'string', example: 'vice-president' },
                displayName: { type: 'string', example: 'Ph√≥ ch·ªß nhi·ªám' },
                level: { type: 'integer', example: 90 },
                description: { type: 'string', example: 'Ph·ª• tr√°ch h·ªó tr·ª£ ch·ªß nhi·ªám' },
                color: { type: 'string', example: '#10B981' }
              }
            },
            Division: {
              type: 'object',
              properties: {
                id: { type: 'integer', example: 1 },
                name: { type: 'string', example: 'Ban Truy·ªÅn th√¥ng' },
                description: { type: 'string', nullable: true },
                color: { type: 'string', example: '#10B981' },
                icon: { type: 'string', example: 'Users' },
                isActive: { type: 'boolean', example: true },
              },
            },
            CreateDivisionRequest: {
              type: 'object',
              required: ['name'],
              properties: {
                name: { type: 'string', example: 'Ban S·ª± ki·ªán' },
                description: { type: 'string', example: 'Ph·ª• tr√°ch t·ªï ch·ª©c c√°c s·ª± ki·ªán' },
                color: { type: 'string', example: '#8B5CF6' },
                icon: { type: 'string', example: 'Calendar' }
              }
            },
            AcademicYear: {
              type: 'object',
              properties: {
                id: { type: 'integer', example: 1 },
                name: { type: 'string', example: 'Kh√≥a 2024-2025' },
                startDate: { type: 'string', format: 'date-time', example: '2024-11-01T00:00:00.000Z' },
                endDate: { type: 'string', format: 'date-time', example: '2025-11-01T00:00:00.000Z' },
                isActive: { type: 'boolean', example: true },
                description: { type: 'string', nullable: true },
              },
            },
            CreateAcademicYearRequest: {
              type: 'object',
              required: ['name', 'startDate', 'endDate'],
              properties: {
                name: { type: 'string', example: 'Kh√≥a 2025-2026' },
                startDate: { type: 'string', format: 'date', example: '2025-11-01' },
                endDate: { type: 'string', format: 'date', example: '2026-11-01' },
                description: { type: 'string', example: 'Kh√≥a h·ªçc nƒÉm 2025-2026' },
                isActive: { type: 'boolean', example: false }
              }
            },
            Achievement: {
              type: 'object',
              properties: {
                id: { type: 'integer', example: 1 },
                title: { type: 'string', example: 'Th√†nh vi√™n xu·∫•t s·∫Øc' },
                description: { type: 'string', example: 'D√†nh cho th√†nh vi√™n c√≥ ƒë√≥ng g√≥p t√≠ch c·ª±c' },
                category: { type: 'string', enum: ['academic', 'creative', 'leadership', 'participation', 'special'] },
                level: { type: 'string', enum: ['bronze', 'silver', 'gold', 'special'] },
                badgeIcon: { type: 'string', example: 'Trophy' },
                badgeColor: { type: 'string', example: '#FFD700' },
                pointsReward: { type: 'integer', example: 50 },
              },
            },
            BeePoints: {
              type: 'object',
              properties: {
                id: { type: 'integer', example: 1 },
                userId: { type: 'integer', example: 1 },
                currentPoints: { type: 'integer', example: 150 },
                totalEarned: { type: 'integer', example: 200 },
                totalSpent: { type: 'integer', example: 50 },
                updatedAt: { type: 'string', format: 'date-time' },
              },
            },
            ApiKey: {
              type: 'object',
              properties: {
                id: { type: 'integer', example: 1 },
                name: { type: 'string', example: 'Mobile App API' },
                permissions: { type: 'array', items: { type: 'string' }, example: ['members:view', 'stats:view'] },
                isActive: { type: 'boolean', example: true },
                createdAt: { type: 'string', format: 'date-time' },
                lastUsed: { type: 'string', format: 'date-time', nullable: true },
              },
            },
            Stats: {
              type: 'object',
              properties: {
                totalMembers: { type: 'integer', example: 25 },
                activeMembers: { type: 'integer', example: 20 },
                alumniMembers: { type: 'integer', example: 5 },
                totalDepartments: { type: 'integer', example: 4 },
              },
            },
          },
        },
        paths: {
          '/api/public/users': {
            get: {
              summary: 'L·∫•y danh s√°ch ng∆∞·ªùi d√πng v·ªõi th√¥ng tin ch·ª©c v·ª• v√† ban',
              tags: ['üü¢ Public'],
              responses: {
                200: {
                  description: 'Danh s√°ch ng∆∞·ªùi d√πng v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin',
                  content: {
                    'application/json': {
                      schema: {
                        type: 'array',
                        items: { $ref: '#/components/schemas/User' }
                      }
                    }
                  }
                },
                500: { $ref: '#/components/responses/BadRequest' }
              }
            }
          },
          '/api/auth/check-init': {
            get: {
              summary: 'Ki·ªÉm tra h·ªá th·ªëng c√≥ c·∫ßn kh·ªüi t·∫°o kh√¥ng',
              tags: ['üîê Authentication'],
              responses: {
                200: {
                  description: 'Tr·∫°ng th√°i kh·ªüi t·∫°o h·ªá th·ªëng',
                  content: {
                    'application/json': {
                      schema: {
                        type: 'object',
                        properties: {
                          needsInit: { type: 'boolean' }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          '/api/auth/login': {
            post: {
              summary: 'ƒêƒÉng nh·∫≠p h·ªá th·ªëng',
              tags: ['üîê Authentication'],
              requestBody: {
                required: true,
                content: {
                  'application/json': {
                    schema: { $ref: '#/components/schemas/LoginRequest' },
                    example: {
                      username: 'admin',
                      password: 'password123'
                    }
                  }
                }
              },
              responses: {
                200: {
                  description: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
                  content: {
                    'application/json': {
                      schema: { $ref: '#/components/schemas/LoginResponse' }
                    }
                  }
                },
                401: { $ref: '#/components/responses/Unauthorized' }
              }
            }
          },
          '/api/auth/me': {
            get: {
              summary: 'L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i',
              tags: ['üîê Authentication'],
              security: [{ bearerAuth: [] }],
              responses: {
                200: {
                  description: 'Th√¥ng tin ng∆∞·ªùi d√πng',
                  content: {
                    'application/json': {
                      schema: { $ref: '#/components/schemas/User' }
                    }
                  }
                },
                401: { $ref: '#/components/responses/Unauthorized' }
              }
            }
          },
          '/api/auth/logout': {
            post: {
              summary: 'ƒêƒÉng xu·∫•t',
              tags: ['üîê Authentication'],
              security: [{ bearerAuth: [] }],
              responses: {
                200: {
                  description: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng',
                  content: {
                    'application/json': {
                      schema: {
                        type: 'object',
                        properties: {
                          message: { type: 'string', example: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng' }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          '/api/members': {
            get: {
              summary: 'L·∫•y danh s√°ch th√†nh vi√™n',
              tags: ['üéì Members'],
              security: [{ bearerAuth: [] }],
              parameters: [
                {
                  in: 'query',
                  name: 'search',
                  schema: { type: 'string' },
                  description: 'T√¨m ki·∫øm theo t√™n, m√£ h·ªçc sinh, l·ªõp'
                },
                {
                  in: 'query',
                  name: 'type',
                  schema: { type: 'string', enum: ['active', 'alumni'] },
                  description: 'Lo·∫°i th√†nh vi√™n'
                },
                {
                  in: 'query',
                  name: 'department',
                  schema: { type: 'integer' },
                  description: 'ID ph√≤ng ban'
                },
                {
                  in: 'query',
                  name: 'position',
                  schema: { type: 'integer' },
                  description: 'ID ch·ª©c v·ª•'
                }
              ],
              responses: {
                200: {
                  description: 'Danh s√°ch th√†nh vi√™n v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß',
                  content: {
                    'application/json': {
                      schema: {
                        type: 'array',
                        items: { $ref: '#/components/schemas/Member' }
                      }
                    }
                  }
                }
              }
            },
            post: {
              summary: 'T·∫°o th√†nh vi√™n m·ªõi (üü° ADMIN)',
              tags: ['üéì Members'],
              security: [{ bearerAuth: [] }],
              requestBody: {
                required: true,
                content: {
                  'application/json': {
                    schema: { $ref: '#/components/schemas/CreateMemberRequest' }
                  }
                }
              },
              responses: {
                201: {
                  description: 'Th√†nh vi√™n ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
                  content: {
                    'application/json': {
                      schema: { $ref: '#/components/schemas/Member' }
                    }
                  }
                },
                403: { $ref: '#/components/responses/Forbidden' }
              }
            }
          },
          '/api/members/{id}': {
            get: {
              summary: 'L·∫•y th√¥ng tin th√†nh vi√™n',
              tags: ['üéì Members'],
              security: [{ bearerAuth: [] }],
              parameters: [
                {
                  in: 'path',
                  name: 'id',
                  required: true,
                  schema: { type: 'integer' },
                  description: 'ID th√†nh vi√™n'
                }
              ],
              responses: {
                200: {
                  description: 'Th√¥ng tin th√†nh vi√™n',
                  content: {
                    'application/json': {
                      schema: { $ref: '#/components/schemas/Member' }
                    }
                  }
                },
                404: { $ref: '#/components/responses/NotFound' }
              }
            },
            put: {
              summary: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh vi√™n (üü° ADMIN)',
              tags: ['üéì Members'],
              security: [{ bearerAuth: [] }],
              parameters: [
                {
                  in: 'path',
                  name: 'id',
                  required: true,
                  schema: { type: 'integer' },
                  description: 'ID th√†nh vi√™n'
                }
              ],
              requestBody: {
                required: true,
                content: {
                  'application/json': {
                    schema: {
                      type: 'object',
                      properties: {
                        fullName: { type: 'string' },
                        phone: { type: 'string' },
                        class: { type: 'string' },
                        departmentId: { type: 'integer' },
                        positionId: { type: 'integer' },
                        notes: { type: 'string' }
                      }
                    }
                  }
                }
              },
              responses: {
                200: {
                  description: 'Th√†nh vi√™n ƒë∆∞·ª£c c·∫≠p nh·∫≠t',
                  content: {
                    'application/json': {
                      schema: { $ref: '#/components/schemas/Member' }
                    }
                  }
                },
                404: { $ref: '#/components/responses/NotFound' }
              }
            },
            delete: {
              summary: 'X√≥a th√†nh vi√™n (üü° ADMIN)',
              tags: ['üéì Members'],
              security: [{ bearerAuth: [] }],
              parameters: [
                {
                  in: 'path',
                  name: 'id',
                  required: true,
                  schema: { type: 'integer' },
                  description: 'ID th√†nh vi√™n'
                }
              ],
              responses: {
                200: {
                  description: 'Th√†nh vi√™n ƒë∆∞·ª£c x√≥a',
                  content: {
                    'application/json': {
                      schema: {
                        type: 'object',
                        properties: {
                          message: { type: 'string', example: 'ƒê√£ x√≥a th√†nh vi√™n' }
                        }
                      }
                    }
                  }
                },
                404: { $ref: '#/components/responses/NotFound' }
              }
            }
          },
          '/api/departments': {
            get: {
              summary: 'L·∫•y danh s√°ch ban',
              tags: ['üè¢ Departments'],
              security: [{ bearerAuth: [] }],
              responses: {
                200: {
                  description: 'Danh s√°ch ban',
                  content: {
                    'application/json': {
                      schema: {
                        type: 'array',
                        items: { $ref: '#/components/schemas/Department' }
                      }
                    }
                  }
                }
              }
            }
          },
          '/api/positions': {
            get: {
              summary: 'L·∫•y danh s√°ch ch·ª©c v·ª•',
              tags: ['üëë Positions'],
              security: [{ bearerAuth: [] }],
              responses: {
                200: {
                  description: 'Danh s√°ch ch·ª©c v·ª•',
                  content: {
                    'application/json': {
                      schema: {
                        type: 'array',
                        items: { $ref: '#/components/schemas/Position' }
                      }
                    }
                  }
                }
              }
            },
            post: {
              summary: 'T·∫°o ch·ª©c v·ª• m·ªõi (üî¥ SUPER_ADMIN)',
              tags: ['üëë Positions'],
              security: [{ bearerAuth: [] }],
              requestBody: {
                required: true,
                content: {
                  'application/json': {
                    schema: { $ref: '#/components/schemas/CreatePositionRequest' }
                  }
                }
              },
              responses: {
                201: {
                  description: 'Ch·ª©c v·ª• ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
                  content: {
                    'application/json': {
                      schema: { $ref: '#/components/schemas/Position' }
                    }
                  }
                },
                403: { $ref: '#/components/responses/Forbidden' }
              }
            }
          },
          '/api/positions/{id}': {
            put: {
              summary: 'C·∫≠p nh·∫≠t ch·ª©c v·ª• (üî¥ SUPER_ADMIN)',
              tags: ['üëë Positions'],
              security: [{ bearerAuth: [] }],
              parameters: [
                {
                  in: 'path',
                  name: 'id',
                  required: true,
                  schema: { type: 'integer' },
                  description: 'ID ch·ª©c v·ª•'
                }
              ],
              requestBody: {
                required: true,
                content: {
                  'application/json': {
                    schema: {
                      type: 'object',
                      properties: {
                        displayName: { type: 'string' },
                        level: { type: 'integer' },
                        description: { type: 'string' },
                        color: { type: 'string' }
                      }
                    }
                  }
                }
              },
              responses: {
                200: {
                  description: 'Ch·ª©c v·ª• ƒë∆∞·ª£c c·∫≠p nh·∫≠t',
                  content: {
                    'application/json': {
                      schema: { $ref: '#/components/schemas/Position' }
                    }
                  }
                },
                404: { $ref: '#/components/responses/NotFound' }
              }
            },
            delete: {
              summary: 'X√≥a ch·ª©c v·ª• (üî¥ SUPER_ADMIN)',
              tags: ['üëë Positions'],
              security: [{ bearerAuth: [] }],
              parameters: [
                {
                  in: 'path',
                  name: 'id',
                  required: true,
                  schema: { type: 'integer' },
                  description: 'ID ch·ª©c v·ª•'
                }
              ],
              responses: {
                200: {
                  description: 'Ch·ª©c v·ª• ƒë∆∞·ª£c x√≥a',
                  content: {
                    'application/json': {
                      schema: {
                        type: 'object',
                        properties: {
                          message: { type: 'string', example: 'ƒê√£ x√≥a ch·ª©c v·ª•' }
                        }
                      }
                    }
                  }
                },
                400: {
                  description: 'Kh√¥ng th·ªÉ x√≥a ch·ª©c v·ª• c√≥ th√†nh vi√™n',
                  content: {
                    'application/json': {
                      schema: { $ref: '#/components/schemas/Error' }
                    }
                  }
                }
              }
            }
          },
          '/api/divisions': {
            get: {
              summary: 'L·∫•y danh s√°ch ban ph·ª• tr√°ch',
              tags: ['üìã Divisions'],
              security: [{ bearerAuth: [] }],
              responses: {
                200: {
                  description: 'Danh s√°ch ban ph·ª• tr√°ch',
                  content: {
                    'application/json': {
                      schema: {
                        type: 'array',
                        items: { $ref: '#/components/schemas/Division' }
                      }
                    }
                  }
                }
              }
            },
            post: {
              summary: 'T·∫°o ban ph·ª• tr√°ch m·ªõi (üî¥ SUPER_ADMIN)',
              tags: ['üìã Divisions'],
              security: [{ bearerAuth: [] }],
              requestBody: {
                required: true,
                content: {
                  'application/json': {
                    schema: { $ref: '#/components/schemas/CreateDivisionRequest' }
                  }
                }
              },
              responses: {
                201: {
                  description: 'Ban ph·ª• tr√°ch ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
                  content: {
                    'application/json': {
                      schema: { $ref: '#/components/schemas/Division' }
                    }
                  }
                },
                403: { $ref: '#/components/responses/Forbidden' }
              }
            }
          },
          '/api/divisions/{id}': {
            put: {
              summary: 'C·∫≠p nh·∫≠t ban ph·ª• tr√°ch (üî¥ SUPER_ADMIN)',
              tags: ['üìã Divisions'],
              security: [{ bearerAuth: [] }],
              parameters: [
                {
                  in: 'path',
                  name: 'id',
                  required: true,
                  schema: { type: 'integer' },
                  description: 'ID ban ph·ª• tr√°ch'
                }
              ],
              requestBody: {
                required: true,
                content: {
                  'application/json': {
                    schema: {
                      type: 'object',
                      properties: {
                        name: { type: 'string' },
                        description: { type: 'string' },
                        color: { type: 'string' },
                        icon: { type: 'string' }
                      }
                    }
                  }
                }
              },
              responses: {
                200: {
                  description: 'Ban ph·ª• tr√°ch ƒë∆∞·ª£c c·∫≠p nh·∫≠t',
                  content: {
                    'application/json': {
                      schema: { $ref: '#/components/schemas/Division' }
                    }
                  }
                },
                404: { $ref: '#/components/responses/NotFound' }
              }
            },
            delete: {
              summary: 'X√≥a ban ph·ª• tr√°ch (üî¥ SUPER_ADMIN)',
              tags: ['üìã Divisions'],
              security: [{ bearerAuth: [] }],
              parameters: [
                {
                  in: 'path',
                  name: 'id',
                  required: true,
                  schema: { type: 'integer' },
                  description: 'ID ban ph·ª• tr√°ch'
                }
              ],
              responses: {
                200: {
                  description: 'Ban ph·ª• tr√°ch ƒë∆∞·ª£c x√≥a',
                  content: {
                    'application/json': {
                      schema: {
                        type: 'object',
                        properties: {
                          message: { type: 'string', example: 'ƒê√£ x√≥a ban' }
                        }
                      }
                    }
                  }
                },
                400: {
                  description: 'Kh√¥ng th·ªÉ x√≥a ban c√≥ th√†nh vi√™n',
                  content: {
                    'application/json': {
                      schema: { $ref: '#/components/schemas/Error' }
                    }
                  }
                }
              }
            }
          },
          '/api/academic-years': {
            get: {
              summary: 'L·∫•y danh s√°ch kh√≥a h·ªçc',
              tags: ['üìÖ Academic Years'],
              security: [{ bearerAuth: [] }],
              responses: {
                200: {
                  description: 'Danh s√°ch kh√≥a h·ªçc (t·ª´ 11/nƒÉm n√†y ƒë·∫øn 11/nƒÉm sau)',
                  content: {
                    'application/json': {
                      schema: {
                        type: 'array',
                        items: { $ref: '#/components/schemas/AcademicYear' }
                      }
                    }
                  }
                }
              }
            },
            post: {
              summary: 'T·∫°o kh√≥a h·ªçc m·ªõi (üî¥ SUPER_ADMIN)',
              tags: ['üìÖ Academic Years'],
              security: [{ bearerAuth: [] }],
              requestBody: {
                required: true,
                content: {
                  'application/json': {
                    schema: { $ref: '#/components/schemas/CreateAcademicYearRequest' }
                  }
                }
              },
              responses: {
                201: {
                  description: 'Kh√≥a h·ªçc ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
                  content: {
                    'application/json': {
                      schema: { $ref: '#/components/schemas/AcademicYear' }
                    }
                  }
                },
                403: { $ref: '#/components/responses/Forbidden' }
              }
            }
          },
          '/api/academic-years/{id}': {
            put: {
              summary: 'C·∫≠p nh·∫≠t kh√≥a h·ªçc (üî¥ SUPER_ADMIN)',
              tags: ['üìÖ Academic Years'],
              security: [{ bearerAuth: [] }],
              parameters: [
                {
                  in: 'path',
                  name: 'id',
                  required: true,
                  schema: { type: 'integer' },
                  description: 'ID kh√≥a h·ªçc'
                }
              ],
              requestBody: {
                required: true,
                content: {
                  'application/json': {
                    schema: {
                      type: 'object',
                      properties: {
                        name: { type: 'string' },
                        description: { type: 'string' },
                        isActive: { type: 'boolean' }
                      }
                    }
                  }
                }
              },
              responses: {
                200: {
                  description: 'Kh√≥a h·ªçc ƒë∆∞·ª£c c·∫≠p nh·∫≠t',
                  content: {
                    'application/json': {
                      schema: { $ref: '#/components/schemas/AcademicYear' }
                    }
                  }
                },
                404: { $ref: '#/components/responses/NotFound' }
              }
            },
            delete: {
              summary: 'X√≥a kh√≥a h·ªçc (üî¥ SUPER_ADMIN)',
              tags: ['üìÖ Academic Years'],
              security: [{ bearerAuth: [] }],
              parameters: [
                {
                  in: 'path',
                  name: 'id',
                  required: true,
                  schema: { type: 'integer' },
                  description: 'ID kh√≥a h·ªçc'
                }
              ],
              responses: {
                200: {
                  description: 'Kh√≥a h·ªçc ƒë∆∞·ª£c x√≥a',
                  content: {
                    'application/json': {
                      schema: {
                        type: 'object',
                        properties: {
                          message: { type: 'string', example: 'ƒê√£ x√≥a kh√≥a h·ªçc' }
                        }
                      }
                    }
                  }
                },
                400: {
                  description: 'Kh√¥ng th·ªÉ x√≥a kh√≥a h·ªçc c√≥ th√†nh vi√™n',
                  content: {
                    'application/json': {
                      schema: { $ref: '#/components/schemas/Error' }
                    }
                  }
                }
              }
            }
          },
          '/api/achievements': {
            get: {
              summary: 'L·∫•y danh s√°ch th√†nh t√≠ch',
              tags: ['üèÜ Achievements'],
              security: [{ bearerAuth: [] }],
              responses: {
                200: {
                  description: 'Danh s√°ch th√†nh t√≠ch',
                  content: {
                    'application/json': {
                      schema: {
                        type: 'array',
                        items: { $ref: '#/components/schemas/Achievement' }
                      }
                    }
                  }
                }
              }
            },
            post: {
              summary: 'T·∫°o th√†nh t√≠ch m·ªõi (üü° ADMIN)',
              tags: ['üèÜ Achievements'],
              security: [{ bearerAuth: [] }],
              requestBody: {
                required: true,
                content: {
                  'application/json': {
                    schema: {
                      type: 'object',
                      required: ['title', 'category', 'level', 'pointsReward'],
                      properties: {
                        title: { type: 'string', example: 'Th√†nh vi√™n xu·∫•t s·∫Øc' },
                        description: { type: 'string', example: 'D√†nh cho th√†nh vi√™n c√≥ ƒë√≥ng g√≥p t√≠ch c·ª±c' },
                        category: { type: 'string', enum: ['academic', 'creative', 'leadership', 'participation', 'special'], example: 'participation' },
                        level: { type: 'string', enum: ['bronze', 'silver', 'gold', 'special'], example: 'gold' },
                        badgeIcon: { type: 'string', example: 'Trophy' },
                        badgeColor: { type: 'string', example: '#FFD700' },
                        pointsReward: { type: 'integer', example: 100 }
                      }
                    }
                  }
                }
              },
              responses: {
                201: {
                  description: 'Th√†nh t√≠ch ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
                  content: {
                    'application/json': {
                      schema: { $ref: '#/components/schemas/Achievement' }
                    }
                  }
                },
                403: { $ref: '#/components/responses/Forbidden' }
              }
            }
          },
          '/api/achievements/award': {
            post: {
              summary: 'Trao th√†nh t√≠ch cho ng∆∞·ªùi d√πng (üü° ADMIN)',
              tags: ['üèÜ Achievements'],
              security: [{ bearerAuth: [] }],
              requestBody: {
                required: true,
                content: {
                  'application/json': {
                    schema: {
                      type: 'object',
                      required: ['userId', 'achievementId'],
                      properties: {
                        userId: { type: 'integer', example: 2 },
                        achievementId: { type: 'integer', example: 1 },
                        notes: { type: 'string', example: 'Ho√†n th√†nh xu·∫•t s·∫Øc d·ª± √°n th√°ng 11' }
                      }
                    }
                  }
                }
              },
              responses: {
                201: {
                  description: 'Th√†nh t√≠ch ƒë∆∞·ª£c trao th√†nh c√¥ng (t·ª± ƒë·ªông c·ªông BeePoints)',
                  content: {
                    'application/json': {
                      schema: {
                        type: 'object',
                        properties: {
                          message: { type: 'string' },
                          pointsAwarded: { type: 'integer' }
                        }
                      }
                    }
                  }
                },
                403: { $ref: '#/components/responses/Forbidden' }
              }
            }
          },
          '/api/achievements/me': {
            get: {
              summary: 'L·∫•y danh s√°ch th√†nh t√≠ch c·ªßa b·∫£n th√¢n',
              tags: ['üèÜ Achievements'],
              security: [{ bearerAuth: [] }],
              responses: {
                200: {
                  description: 'Danh s√°ch th√†nh t√≠ch c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i',
                  content: {
                    'application/json': {
                      schema: {
                        type: 'array',
                        items: {
                          type: 'object',
                          properties: {
                            id: { type: 'integer' },
                            awardedDate: { type: 'string', format: 'date-time' },
                            notes: { type: 'string' },
                            achievement: { $ref: '#/components/schemas/Achievement' }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          '/api/bee-points/me': {
            get: {
              summary: 'L·∫•y ƒëi·ªÉm BeePoints c·ªßa b·∫£n th√¢n',
              tags: ['üçØ BeePoints'],
              security: [{ bearerAuth: [] }],
              responses: {
                200: {
                  description: 'Th√¥ng tin ƒëi·ªÉm BeePoints',
                  content: {
                    'application/json': {
                      schema: { $ref: '#/components/schemas/BeePoints' }
                    }
                  }
                }
              }
            }
          },
          '/api/bee-points/add': {
            post: {
              summary: 'Th√™m ƒëi·ªÉm cho ng∆∞·ªùi d√πng (üü° ADMIN)',
              tags: ['üçØ BeePoints'],
              security: [{ bearerAuth: [] }],
              requestBody: {
                required: true,
                content: {
                  'application/json': {
                    schema: {
                      type: 'object',
                      required: ['userId', 'amount', 'description'],
                      properties: {
                        userId: { type: 'integer', example: 2 },
                        amount: { type: 'integer', example: 50 },
                        description: { type: 'string', example: 'Th∆∞·ªüng ho√†n th√†nh nhi·ªám v·ª•' }
                      }
                    }
                  }
                }
              },
              responses: {
                200: {
                  description: 'ƒêi·ªÉm ƒë∆∞·ª£c th√™m th√†nh c√¥ng',
                  content: {
                    'application/json': {
                      schema: {
                        type: 'object',
                        properties: {
                          message: { type: 'string' },
                          newBalance: { type: 'integer' }
                        }
                      }
                    }
                  }
                },
                403: { $ref: '#/components/responses/Forbidden' }
              }
            }
          },
          '/api/bee-points/transactions': {
            get: {
              summary: 'L·∫•y l·ªãch s·ª≠ giao d·ªãch ƒëi·ªÉm',
              tags: ['üçØ BeePoints'],
              security: [{ bearerAuth: [] }],
              responses: {
                200: {
                  description: 'L·ªãch s·ª≠ giao d·ªãch ƒëi·ªÉm',
                  content: {
                    'application/json': {
                      schema: {
                        type: 'array',
                        items: {
                          type: 'object',
                          properties: {
                            id: { type: 'integer' },
                            userId: { type: 'integer' },
                            type: { type: 'string', enum: ['earned', 'spent', 'admin_adjustment'] },
                            amount: { type: 'integer' },
                            description: { type: 'string' },
                            achievementId: { type: 'integer', nullable: true },
                            createdAt: { type: 'string', format: 'date-time' }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          '/api/stats': {
            get: {
              summary: 'L·∫•y th·ªëng k√™ c∆° b·∫£n',
              tags: ['üìä Statistics'],
              security: [{ bearerAuth: [] }],
              responses: {
                200: {
                  description: 'Th·ªëng k√™ t·ªïng quan',
                  content: {
                    'application/json': {
                      schema: { $ref: '#/components/schemas/Stats' }
                    }
                  }
                }
              }
            }
          },
          '/api/dynamic-stats': {
            get: {
              summary: 'L·∫•y th·ªëng k√™ ƒë·ªông',
              tags: ['üìä Statistics'],
              security: [{ bearerAuth: [] }],
              responses: {
                200: {
                  description: 'Th·ªëng k√™ ƒë·ªông',
                  content: {
                    'application/json': {
                      schema: {
                        type: 'array',
                        items: {
                          type: 'object',
                          properties: {
                            id: { type: 'integer' },
                            title: { type: 'string' },
                            value: { type: 'string' },
                            icon: { type: 'string' },
                            color: { type: 'string' },
                            isActive: { type: 'boolean' }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          '/api/admin/api-keys': {
            get: {
              summary: 'L·∫•y danh s√°ch API keys (üü° ADMIN)',
              tags: ['üîë API Keys'],
              security: [{ bearerAuth: [] }],
              responses: {
                200: {
                  description: 'Danh s√°ch API keys',
                  content: {
                    'application/json': {
                      schema: {
                        type: 'array',
                        items: { $ref: '#/components/schemas/ApiKey' }
                      }
                    }
                  }
                },
                403: { $ref: '#/components/responses/Forbidden' }
              }
            },
            post: {
              summary: 'T·∫°o API key m·ªõi (üü° ADMIN)',
              tags: ['üîë API Keys'],
              security: [{ bearerAuth: [] }],
              requestBody: {
                required: true,
                content: {
                  'application/json': {
                    schema: {
                      type: 'object',
                      required: ['name', 'permissions'],
                      properties: {
                        name: { type: 'string', example: 'Mobile App API' },
                        permissions: { 
                          type: 'array', 
                          items: { type: 'string' }, 
                          example: ['members:view', 'stats:view', 'achievements:view'] 
                        }
                      }
                    }
                  }
                }
              },
              responses: {
                201: {
                  description: 'API key ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
                  content: {
                    'application/json': {
                      schema: {
                        type: 'object',
                        properties: {
                          apiKey: { type: 'string' },
                          id: { type: 'integer' },
                          name: { type: 'string' },
                          permissions: { type: 'array', items: { type: 'string' } }
                        }
                      }
                    }
                  }
                },
                403: { $ref: '#/components/responses/Forbidden' }
              }
            }
          },
          '/api/admin/api-keys/{id}': {
            put: {
              summary: 'C·∫≠p nh·∫≠t API key (üü° ADMIN)',
              tags: ['üîë API Keys'],
              security: [{ bearerAuth: [] }],
              parameters: [
                {
                  in: 'path',
                  name: 'id',
                  required: true,
                  schema: { type: 'integer' },
                  description: 'ID API key'
                }
              ],
              requestBody: {
                required: true,
                content: {
                  'application/json': {
                    schema: {
                      type: 'object',
                      properties: {
                        permissions: { 
                          type: 'array', 
                          items: { type: 'string' }, 
                          example: ['members:view', 'stats:view'] 
                        }
                      }
                    }
                  }
                }
              },
              responses: {
                200: {
                  description: 'API key ƒë∆∞·ª£c c·∫≠p nh·∫≠t',
                  content: {
                    'application/json': {
                      schema: { $ref: '#/components/schemas/ApiKey' }
                    }
                  }
                },
                404: { $ref: '#/components/responses/NotFound' }
              }
            },
            delete: {
              summary: 'X√≥a API key (üü° ADMIN)',
              tags: ['üîë API Keys'],
              security: [{ bearerAuth: [] }],
              parameters: [
                {
                  in: 'path',
                  name: 'id',
                  required: true,
                  schema: { type: 'integer' },
                  description: 'ID API key'
                }
              ],
              responses: {
                200: {
                  description: 'API key ƒë∆∞·ª£c x√≥a',
                  content: {
                    'application/json': {
                      schema: {
                        type: 'object',
                        properties: {
                          message: { type: 'string', example: 'API key ƒë√£ ƒë∆∞·ª£c x√≥a' }
                        }
                      }
                    }
                  }
                },
                404: { $ref: '#/components/responses/NotFound' }
              }
            }
          },
          '/api/external/stats': {
            get: {
              summary: 'L·∫•y th·ªëng k√™ cho ·ª©ng d·ª•ng b√™n ngo√†i',
              tags: ['üåê External API'],
              security: [{ ApiKeyAuth: [] }],
              responses: {
                200: {
                  description: 'Th·ªëng k√™ cho ·ª©ng d·ª•ng b√™n ngo√†i',
                  content: {
                    'application/json': {
                      schema: { $ref: '#/components/schemas/Stats' }
                    }
                  }
                },
                401: { $ref: '#/components/responses/Unauthorized' }
              }
            }
          },
          '/api/external/members': {
            get: {
              summary: 'L·∫•y danh s√°ch th√†nh vi√™n cho ·ª©ng d·ª•ng b√™n ngo√†i',
              tags: ['üåê External API'],
              security: [{ ApiKeyAuth: [] }],
              parameters: [
                {
                  in: 'query',
                  name: 'departmentId',
                  schema: { type: 'integer' },
                  description: 'ID ph√≤ng ban'
                }
              ],
              responses: {
                200: {
                  description: 'Danh s√°ch th√†nh vi√™n cho ·ª©ng d·ª•ng b√™n ngo√†i',
                  content: {
                    'application/json': {
                      schema: {
                        type: 'array',
                        items: { $ref: '#/components/schemas/Member' }
                      }
                    }
                  }
                },
                401: { $ref: '#/components/responses/Unauthorized' }
              }
            }
          },
          '/api/external/achievements': {
            get: {
              summary: 'L·∫•y danh s√°ch th√†nh t√≠ch cho ·ª©ng d·ª•ng b√™n ngo√†i',
              tags: ['üåê External API'],
              security: [{ ApiKeyAuth: [] }],
              responses: {
                200: {
                  description: 'Danh s√°ch th√†nh t√≠ch cho ·ª©ng d·ª•ng b√™n ngo√†i',
                  content: {
                    'application/json': {
                      schema: {
                        type: 'array',
                        items: { $ref: '#/components/schemas/Achievement' }
                      }
                    }
                  }
                },
                401: { $ref: '#/components/responses/Unauthorized' }
              }
            }
          }
        },
        tags: [
          { name: 'üü¢ Public', description: 'API c√¥ng khai - kh√¥ng c·∫ßn x√°c th·ª±c' },
          { name: 'üîê Authentication', description: 'X√°c th·ª±c v√† ƒëƒÉng nh·∫≠p' },
          { name: 'üë• Users', description: 'Qu·∫£n l√Ω ng∆∞·ªùi d√πng h·ªá th·ªëng (üü° ADMIN required)' },
          { name: 'üéì Members', description: 'Qu·∫£n l√Ω th√†nh vi√™n CLB' },
          { name: 'üè¢ Departments', description: 'Qu·∫£n l√Ω ban trong CLB' },
          { name: 'üëë Positions', description: 'Qu·∫£n l√Ω ch·ª©c v·ª• chu·∫©n h√≥a (üî¥ SUPER_ADMIN required)' },
          { name: 'üìã Divisions', description: 'Qu·∫£n l√Ω ban ph·ª• tr√°ch (üî¥ SUPER_ADMIN required)' },
          { name: 'üìÖ Academic Years', description: 'Qu·∫£n l√Ω kh√≥a h·ªçc (üî¥ SUPER_ADMIN required)' },
          { name: 'üèÜ Achievements', description: 'H·ªá th·ªëng th√†nh t√≠ch' },
          { name: 'üçØ BeePoints', description: 'H·ªá th·ªëng ƒëi·ªÉm th∆∞·ªüng' },
          { name: 'üìä Statistics', description: 'Th·ªëng k√™ t·ªïng quan' },
          { name: 'üîë API Keys', description: 'Qu·∫£n l√Ω API keys (üü° ADMIN required)' },
          { name: 'üåê External API', description: 'API cho ·ª©ng d·ª•ng th·ª© 3 (c·∫ßn API key)' },
        ],
      },
      apis: [],
    };

    const specs = swaggerJsdoc(options);
    
    const html = swaggerUi.generateHTML(specs, {
      explorer: true,
      customSiteTitle: 'CLB S√°ng T·∫°o - API Documentation',
      customCss: `
        .swagger-ui .topbar { display: none; }
        .swagger-ui .info { margin: 20px 0; }
        .swagger-ui .info .title { color: #1f2937; font-size: 24px; }
        .swagger-ui .info .description { font-size: 14px; line-height: 1.6; white-space: pre-line; }
        .swagger-ui .scheme-container { background: #f8fafc; padding: 15px; border-radius: 8px; margin: 20px 0; }
        .swagger-ui .opblock.opblock-post { border-color: #059669; background: rgba(5, 150, 105, 0.1); }
        .swagger-ui .opblock.opblock-get { border-color: #0284c7; background: rgba(2, 132, 199, 0.1); }
        .swagger-ui .opblock.opblock-put { border-color: #f59e0b; background: rgba(245, 158, 11, 0.1); }
        .swagger-ui .opblock.opblock-delete { border-color: #dc2626; background: rgba(220, 38, 38, 0.1); }
        .swagger-ui .opblock-tag { font-size: 16px; font-weight: 600; margin-bottom: 10px; }
        .swagger-ui .opblock-summary { font-weight: 500; }
      `,
      swaggerOptions: {
        persistAuthorization: true,
        tryItOutEnabled: true,
        filter: true,
        displayRequestDuration: true,
        docExpansion: 'list',
        defaultModelsExpandDepth: 2,
        defaultModelExpandDepth: 2,
        tagsSorter: (a: string, b: string) => {
          const order = [
            'üü¢ Public',
            'üîê Authentication', 
            'üë• Users',
            'üéì Members',
            'üè¢ Departments',
            'üëë Positions',
            'üìã Divisions',
            'üìÖ Academic Years',
            'üèÜ Achievements',
            'üçØ BeePoints',
            'üìä Statistics',
            'üîë API Keys',
            'üåê External API'
          ];
          return order.indexOf(a) - order.indexOf(b);
        },
      },
    });
    
    res.send(html);
  });

  // JSON spec
  app.get('/api-docs.json', (req, res) => {
    const protocol = req.headers['x-forwarded-proto'] || req.protocol;
    const host = req.headers['x-forwarded-host'] || req.headers.host;
    const serverUrl = `${protocol}://${host}`;
    
    const options = {
      definition: {
        openapi: '3.0.0',
        info: {
          title: 'CLB S√°ng T·∫°o - API Documentation',
          version: '2.1.0',
          description: 'API cho h·ªá th·ªëng qu·∫£n l√Ω c√¢u l·∫°c b·ªô s√°ng t·∫°o',
        },
        servers: [{ url: serverUrl, description: 'Current Server' }],
        // Minimal schema for JSON export
        components: {
          securitySchemes: {
            bearerAuth: { type: 'http', scheme: 'bearer', bearerFormat: 'JWT' },
            ApiKeyAuth: { type: 'apiKey', in: 'header', name: 'x-api-key' },
          },
        },
      },
      apis: [],
    };
    
    const specs = swaggerJsdoc(options);
    res.setHeader('Content-Type', 'application/json');
    res.send(specs);
  });

  // Postman collection
  app.get('/postman-collection.json', (req, res) => {
    const protocol = req.headers['x-forwarded-proto'] || req.protocol;
    const host = req.headers['x-forwarded-host'] || req.headers.host;
    const serverUrl = `${protocol}://${host}`;
    
    const collection = {
      info: {
        name: 'CLB S√°ng T·∫°o API - Production Ready',
        description: 'Complete API collection for club management system',
        schema: 'https://schema.getpostman.com/json/collection/v2.1.0/collection.json',
      },
      variable: [
        { key: 'baseUrl', value: serverUrl },
        { key: 'authToken', value: '' },
        { key: 'apiKey', value: '' },
      ],
      auth: {
        type: 'bearer',
        bearer: [{ key: 'token', value: '{{authToken}}', type: 'string' }],
      },
      item: [
        {
          name: 'üîê Authentication',
          item: [
            {
              name: 'Login',
              event: [
                {
                  listen: 'test',
                  script: {
                    exec: [
                      'if (pm.response.to.have.status(200)) {',
                      '    const response = pm.response.json();',
                      '    pm.collectionVariables.set("authToken", response.token);',
                      '}'
                    ]
                  }
                }
              ],
              request: {
                method: 'POST',
                header: [{ key: 'Content-Type', value: 'application/json' }],
                body: {
                  mode: 'raw',
                  raw: JSON.stringify({ username: 'admin', password: 'password123' })
                },
                url: '{{baseUrl}}/api/auth/login'
              }
            }
          ]
        }
      ]
    };

    res.setHeader('Content-Type', 'application/json');
    res.setHeader('Content-Disposition', 'attachment; filename="CLB-SangTao-Production.postman_collection.json"');
    res.send(collection);
  });

  // Landing page redirect
  app.get('/docs', (req, res) => res.redirect('/api-docs'));
}